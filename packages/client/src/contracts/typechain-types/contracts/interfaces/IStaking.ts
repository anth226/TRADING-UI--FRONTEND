/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IStakingInterface extends utils.Interface {
  functions: {
    "adjCoef(bool)": FunctionFragment;
    "getInvestorBalance(address)": FunctionFragment;
    "getPayoutIncrease(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getPercentAmerican(address)": FunctionFragment;
    "getPercentDigital(address)": FunctionFragment;
    "getUserBalanceAllowance(address)": FunctionFragment;
    "get_r1(bool)": FunctionFragment;
    "get_r2()": FunctionFragment;
    "invLength()": FunctionFragment;
    "investMoneyAdd(uint256)": FunctionFragment;
    "investMoneyWithdraw(uint256)": FunctionFragment;
    "investRewardsAmeroptUpdate()": FunctionFragment;
    "investRewardsDigoptUpdate()": FunctionFragment;
    "investRewardsUpdate()": FunctionFragment;
    "investorInfo(address)": FunctionFragment;
    "payTokensTo(address,uint256)": FunctionFragment;
    "rewardBankAmeroptUpdate(uint256)": FunctionFragment;
    "rewardBankDigoptUpdate(uint256)": FunctionFragment;
    "rewardBankUpdate(uint256)": FunctionFragment;
    "setMinAmount(uint256)": FunctionFragment;
    "takeTokensFrom(address,uint256)": FunctionFragment;
    "updateCallCollateral(uint256,uint256)": FunctionFragment;
    "updatePutCollateral(uint256,uint256)": FunctionFragment;
    "valueOfCollateralTotal()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjCoef"
      | "getInvestorBalance"
      | "getPayoutIncrease"
      | "getPercentAmerican"
      | "getPercentDigital"
      | "getUserBalanceAllowance"
      | "get_r1"
      | "get_r2"
      | "invLength"
      | "investMoneyAdd"
      | "investMoneyWithdraw"
      | "investRewardsAmeroptUpdate"
      | "investRewardsDigoptUpdate"
      | "investRewardsUpdate"
      | "investorInfo"
      | "payTokensTo"
      | "rewardBankAmeroptUpdate"
      | "rewardBankDigoptUpdate"
      | "rewardBankUpdate"
      | "setMinAmount"
      | "takeTokensFrom"
      | "updateCallCollateral"
      | "updatePutCollateral"
      | "valueOfCollateralTotal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjCoef",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayoutIncrease",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPercentAmerican",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPercentDigital",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalanceAllowance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_r1",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "get_r2", values?: undefined): string;
  encodeFunctionData(functionFragment: "invLength", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "investMoneyAdd",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "investMoneyWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "investRewardsAmeroptUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investRewardsDigoptUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investRewardsUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investorInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "payTokensTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBankAmeroptUpdate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBankDigoptUpdate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBankUpdate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeTokensFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCallCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePutCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueOfCollateralTotal",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "adjCoef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayoutIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPercentAmerican",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPercentDigital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalanceAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_r1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_r2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investMoneyAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investMoneyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investRewardsAmeroptUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investRewardsDigoptUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investRewardsUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payTokensTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBankAmeroptUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBankDigoptUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBankUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeTokensFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCallCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePutCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueOfCollateralTotal",
    data: BytesLike
  ): Result;

  events: {
    "Invest(address,uint256)": EventFragment;
    "Reward_continue(uint256)": EventFragment;
    "Reward_finish(uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Invest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward_continue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward_finish"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface InvestEventObject {
  _address: string;
  _amount: BigNumber;
}
export type InvestEvent = TypedEvent<[string, BigNumber], InvestEventObject>;

export type InvestEventFilter = TypedEventFilter<InvestEvent>;

export interface Reward_continueEventObject {
  timeUpdate: BigNumber;
}
export type Reward_continueEvent = TypedEvent<
  [BigNumber],
  Reward_continueEventObject
>;

export type Reward_continueEventFilter = TypedEventFilter<Reward_continueEvent>;

export interface Reward_finishEventObject {
  time_finish: BigNumber;
}
export type Reward_finishEvent = TypedEvent<
  [BigNumber],
  Reward_finishEventObject
>;

export type Reward_finishEventFilter = TypedEventFilter<Reward_finishEvent>;

export interface WithdrawEventObject {
  _address: string;
  _amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjCoef(
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { coef: BigNumber }>;

    getInvestorBalance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getPayoutIncrease(
      S: PromiseOrValue<BigNumberish>,
      P: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      D: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { I: BigNumber }>;

    getPercentAmerican(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pr: BigNumber }>;

    getPercentDigital(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pr: BigNumber }>;

    getUserBalanceAllowance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    get_r1(
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { r1: BigNumber }>;

    get_r2(overrides?: CallOverrides): Promise<[BigNumber] & { r2: BigNumber }>;

    invLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    investMoneyAdd(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investMoneyWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investRewardsAmeroptUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investRewardsDigoptUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investRewardsUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investorInfo(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { eventId: BigNumber; timeStart: BigNumber }
    >;

    payTokensTo(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardBankAmeroptUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardBankDigoptUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardBankUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeTokensFrom(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCallCollateral(
      _amount: PromiseOrValue<BigNumberish>,
      sign: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePutCollateral(
      _amount: PromiseOrValue<BigNumberish>,
      sign: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    valueOfCollateralTotal(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;
  };

  adjCoef(
    optionType: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInvestorBalance(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayoutIncrease(
    S: PromiseOrValue<BigNumberish>,
    P: PromiseOrValue<BigNumberish>,
    L: PromiseOrValue<BigNumberish>,
    D: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPercentAmerican(
    a: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPercentDigital(
    a: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserBalanceAllowance(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_r1(
    optionType: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_r2(overrides?: CallOverrides): Promise<BigNumber>;

  invLength(overrides?: CallOverrides): Promise<BigNumber>;

  investMoneyAdd(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investMoneyWithdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investRewardsAmeroptUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investRewardsDigoptUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investRewardsUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investorInfo(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { eventId: BigNumber; timeStart: BigNumber }
  >;

  payTokensTo(
    _address: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardBankAmeroptUpdate(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardBankDigoptUpdate(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardBankUpdate(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinAmount(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeTokensFrom(
    _address: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCallCollateral(
    _amount: PromiseOrValue<BigNumberish>,
    sign: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePutCollateral(
    _amount: PromiseOrValue<BigNumberish>,
    sign: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  valueOfCollateralTotal(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    adjCoef(
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestorBalance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutIncrease(
      S: PromiseOrValue<BigNumberish>,
      P: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      D: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPercentAmerican(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPercentDigital(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBalanceAllowance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r1(
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r2(overrides?: CallOverrides): Promise<BigNumber>;

    invLength(overrides?: CallOverrides): Promise<BigNumber>;

    investMoneyAdd(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    investMoneyWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    investRewardsAmeroptUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    investRewardsDigoptUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    investRewardsUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    investorInfo(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { eventId: BigNumber; timeStart: BigNumber }
    >;

    payTokensTo(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardBankAmeroptUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardBankDigoptUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardBankUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMinAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeTokensFrom(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateCallCollateral(
      _amount: PromiseOrValue<BigNumberish>,
      sign: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePutCollateral(
      _amount: PromiseOrValue<BigNumberish>,
      sign: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfCollateralTotal(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Invest(address,uint256)"(
      _address?: null,
      _amount?: null
    ): InvestEventFilter;
    Invest(_address?: null, _amount?: null): InvestEventFilter;

    "Reward_continue(uint256)"(timeUpdate?: null): Reward_continueEventFilter;
    Reward_continue(timeUpdate?: null): Reward_continueEventFilter;

    "Reward_finish(uint256)"(time_finish?: null): Reward_finishEventFilter;
    Reward_finish(time_finish?: null): Reward_finishEventFilter;

    "Withdraw(address,uint256)"(
      _address?: null,
      _amount?: null
    ): WithdrawEventFilter;
    Withdraw(_address?: null, _amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    adjCoef(
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestorBalance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayoutIncrease(
      S: PromiseOrValue<BigNumberish>,
      P: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      D: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPercentAmerican(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPercentDigital(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBalanceAllowance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r1(
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r2(overrides?: CallOverrides): Promise<BigNumber>;

    invLength(overrides?: CallOverrides): Promise<BigNumber>;

    investMoneyAdd(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investMoneyWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investRewardsAmeroptUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investRewardsDigoptUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investRewardsUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investorInfo(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payTokensTo(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardBankAmeroptUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardBankDigoptUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardBankUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeTokensFrom(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCallCollateral(
      _amount: PromiseOrValue<BigNumberish>,
      sign: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePutCollateral(
      _amount: PromiseOrValue<BigNumberish>,
      sign: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    valueOfCollateralTotal(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjCoef(
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvestorBalance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayoutIncrease(
      S: PromiseOrValue<BigNumberish>,
      P: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      D: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPercentAmerican(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPercentDigital(
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBalanceAllowance(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_r1(
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_r2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investMoneyAdd(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investMoneyWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investRewardsAmeroptUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investRewardsDigoptUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investRewardsUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investorInfo(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payTokensTo(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardBankAmeroptUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardBankDigoptUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardBankUpdate(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeTokensFrom(
      _address: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCallCollateral(
      _amount: PromiseOrValue<BigNumberish>,
      sign: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePutCollateral(
      _amount: PromiseOrValue<BigNumberish>,
      sign: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    valueOfCollateralTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
