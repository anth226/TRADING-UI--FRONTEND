/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ITreasuryInterface extends utils.Interface {
  functions: {
    "adjCoeff(uint256,uint256,uint256)": FunctionFragment;
    "distributeProfit()": FunctionFragment;
    "getCollateralByOptionType(uint256,uint256,uint256)": FunctionFragment;
    "get_r1(uint256,uint256,uint256)": FunctionFragment;
    "get_r2(uint256,uint256)": FunctionFragment;
    "lockBetCollateral(uint256,uint256,uint256,uint256)": FunctionFragment;
    "notifyPlatformReward(address,uint256)": FunctionFragment;
    "onLooseRewards(uint256,uint256)": FunctionFragment;
    "payBlxTo(address,uint256)": FunctionFragment;
    "payTokensTo(address,uint256)": FunctionFragment;
    "registerBalanceChange(address,uint256,uint256,uint8)": FunctionFragment;
    "takeBlxFrom(address,uint256)": FunctionFragment;
    "takeTokensFrom(address,uint256)": FunctionFragment;
    "totalCollateral(uint256,uint256)": FunctionFragment;
    "unlockBetCollateral(uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdrawBlx(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjCoeff"
      | "distributeProfit"
      | "getCollateralByOptionType"
      | "get_r1"
      | "get_r2"
      | "lockBetCollateral"
      | "notifyPlatformReward"
      | "onLooseRewards"
      | "payBlxTo"
      | "payTokensTo"
      | "registerBalanceChange"
      | "takeBlxFrom"
      | "takeTokensFrom"
      | "totalCollateral"
      | "unlockBetCollateral"
      | "withdrawBlx"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjCoeff",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralByOptionType",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_r1",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_r2",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockBetCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyPlatformReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onLooseRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payBlxTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payTokensTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBalanceChange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takeBlxFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeTokensFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockBetCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBlx",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "adjCoeff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralByOptionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_r1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_r2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockBetCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyPlatformReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLooseRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payBlxTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payTokensTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBalanceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeBlxFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeTokensFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockBetCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBlx",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjCoeff(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { coef: BigNumber }>;

    distributeProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCollateralByOptionType(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    get_r1(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { r1: BigNumber }>;

    get_r2(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { r2: BigNumber }>;

    lockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      productType: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    notifyPlatformReward(
      token: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onLooseRewards(
      usd: PromiseOrValue<BigNumberish>,
      blx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payBlxTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payTokensTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerBalanceChange(
      token: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeBlxFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeTokensFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCollateral(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      productType: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBlx(
      user: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adjCoeff(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributeProfit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCollateralByOptionType(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  get_r1(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_r2(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockBetCollateral(
    amount: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    productType: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  notifyPlatformReward(
    token: PromiseOrValue<string>,
    reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onLooseRewards(
    usd: PromiseOrValue<BigNumberish>,
    blx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payBlxTo(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payTokensTo(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerBalanceChange(
    token: PromiseOrValue<string>,
    investment: PromiseOrValue<BigNumberish>,
    payout: PromiseOrValue<BigNumberish>,
    product: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeBlxFrom(
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeTokensFrom(
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCollateral(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockBetCollateral(
    amount: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    productType: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBlx(
    user: PromiseOrValue<string>,
    withdrawAmount: PromiseOrValue<BigNumberish>,
    burnAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjCoeff(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeProfit(overrides?: CallOverrides): Promise<void>;

    getCollateralByOptionType(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r1(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r2(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      productType: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyPlatformReward(
      token: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onLooseRewards(
      usd: PromiseOrValue<BigNumberish>,
      blx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payBlxTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payTokensTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerBalanceChange(
      token: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeBlxFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeTokensFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCollateral(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      productType: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBlx(
      user: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    adjCoeff(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCollateralByOptionType(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    get_r1(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r2(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      productType: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    notifyPlatformReward(
      token: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onLooseRewards(
      usd: PromiseOrValue<BigNumberish>,
      blx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payBlxTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payTokensTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerBalanceChange(
      token: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeBlxFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeTokensFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCollateral(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      productType: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBlx(
      user: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjCoeff(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralByOptionType(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    get_r1(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_r2(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      productType: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    notifyPlatformReward(
      token: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onLooseRewards(
      usd: PromiseOrValue<BigNumberish>,
      blx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payBlxTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payTokensTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerBalanceChange(
      token: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeBlxFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeTokensFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCollateral(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      productType: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBlx(
      user: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
