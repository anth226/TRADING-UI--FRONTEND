/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IAffiliateNewInterface extends utils.Interface {
  functions: {
    "addReferal(address,address)": FunctionFragment;
    "addTier(uint256,uint256,uint256,bool)": FunctionFragment;
    "addUser(address)": FunctionFragment;
    "checkUserExists(address)": FunctionFragment;
    "claimReward(address)": FunctionFragment;
    "getParent(address)": FunctionFragment;
    "getUserStats(address,address)": FunctionFragment;
    "showUserRewards(address,address)": FunctionFragment;
    "updateStats(address,uint256,address,bool)": FunctionFragment;
    "updateTier(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "updateVolume(address,uint256,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addReferal"
      | "addTier"
      | "addUser"
      | "checkUserExists"
      | "claimReward"
      | "getParent"
      | "getUserStats"
      | "showUserRewards"
      | "updateStats"
      | "updateTier"
      | "updateVolume"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addReferal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTier",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUserExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "showUserRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStats",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTier",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVolume",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addReferal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkUserExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVolume",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAffiliateNew extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAffiliateNewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addReferal(
      user: PromiseOrValue<string>,
      referer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkUserExists(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimReward(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getParent(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserStats(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    showUserRewards(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateStats(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVolume(
      user: PromiseOrValue<string>,
      volume: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addReferal(
    user: PromiseOrValue<string>,
    referer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTier(
    volume: PromiseOrValue<BigNumberish>,
    refShare: PromiseOrValue<BigNumberish>,
    selfShare: PromiseOrValue<BigNumberish>,
    isDigital: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUser(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkUserExists(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimReward(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getParent(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserStats(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  showUserRewards(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateStats(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    isDigital: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTier(
    volume: PromiseOrValue<BigNumberish>,
    refShare: PromiseOrValue<BigNumberish>,
    selfShare: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    isDigital: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVolume(
    user: PromiseOrValue<string>,
    volume: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    isDigital: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addReferal(
      user: PromiseOrValue<string>,
      referer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkUserExists(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimReward(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getParent(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserStats(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    showUserRewards(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateStats(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVolume(
      user: PromiseOrValue<string>,
      volume: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addReferal(
      user: PromiseOrValue<string>,
      referer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkUserExists(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getParent(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStats(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showUserRewards(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateStats(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVolume(
      user: PromiseOrValue<string>,
      volume: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReferal(
      user: PromiseOrValue<string>,
      referer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkUserExists(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getParent(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStats(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    showUserRewards(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateStats(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVolume(
      user: PromiseOrValue<string>,
      volume: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
