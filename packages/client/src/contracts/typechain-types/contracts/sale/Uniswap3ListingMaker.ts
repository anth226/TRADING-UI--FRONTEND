/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface Uniswap3ListingMakerInterface extends utils.Interface {
  functions: {
    "FEES()": FunctionFragment;
    "TICK_LOWER()": FunctionFragment;
    "TICK_UPPER()": FunctionFragment;
    "TIME_CONST()": FunctionFragment;
    "addTrustedAddress(address)": FunctionFragment;
    "createListing(address,address)": FunctionFragment;
    "isTrustedAddress(address)": FunctionFragment;
    "isTrustedCaller()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolAddress()": FunctionFragment;
    "posManagerAddress()": FunctionFragment;
    "priceToSqrtX96(uint256)": FunctionFragment;
    "removeTrustedAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPositionManagerAddress(address)": FunctionFragment;
    "tokenId()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEES"
      | "TICK_LOWER"
      | "TICK_UPPER"
      | "TIME_CONST"
      | "addTrustedAddress"
      | "createListing"
      | "isTrustedAddress"
      | "isTrustedCaller"
      | "owner"
      | "poolAddress"
      | "posManagerAddress"
      | "priceToSqrtX96"
      | "removeTrustedAddress"
      | "renounceOwnership"
      | "setPositionManagerAddress"
      | "tokenId"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "FEES", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TICK_LOWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TICK_UPPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIME_CONST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedCaller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "posManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceToSqrtX96",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionManagerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "FEES", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TICK_LOWER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TICK_UPPER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TIME_CONST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "posManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceToSqrtX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Uniswap3ListingMaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Uniswap3ListingMakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEES(overrides?: CallOverrides): Promise<[number]>;

    TICK_LOWER(overrides?: CallOverrides): Promise<[number]>;

    TICK_UPPER(overrides?: CallOverrides): Promise<[number]>;

    TIME_CONST(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createListing(
      token1Address: PromiseOrValue<string>,
      token2Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedCaller(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolAddress(overrides?: CallOverrides): Promise<[string]>;

    posManagerAddress(overrides?: CallOverrides): Promise<[string]>;

    priceToSqrtX96(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPositionManagerAddress(
      _posManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FEES(overrides?: CallOverrides): Promise<number>;

  TICK_LOWER(overrides?: CallOverrides): Promise<number>;

  TICK_UPPER(overrides?: CallOverrides): Promise<number>;

  TIME_CONST(overrides?: CallOverrides): Promise<BigNumber>;

  addTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createListing(
    token1Address: PromiseOrValue<string>,
    token2Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolAddress(overrides?: CallOverrides): Promise<string>;

  posManagerAddress(overrides?: CallOverrides): Promise<string>;

  priceToSqrtX96(
    price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPositionManagerAddress(
    _posManagerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEES(overrides?: CallOverrides): Promise<number>;

    TICK_LOWER(overrides?: CallOverrides): Promise<number>;

    TICK_UPPER(overrides?: CallOverrides): Promise<number>;

    TIME_CONST(overrides?: CallOverrides): Promise<BigNumber>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createListing(
      token1Address: PromiseOrValue<string>,
      token2Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolAddress(overrides?: CallOverrides): Promise<string>;

    posManagerAddress(overrides?: CallOverrides): Promise<string>;

    priceToSqrtX96(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPositionManagerAddress(
      _posManagerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    FEES(overrides?: CallOverrides): Promise<BigNumber>;

    TICK_LOWER(overrides?: CallOverrides): Promise<BigNumber>;

    TICK_UPPER(overrides?: CallOverrides): Promise<BigNumber>;

    TIME_CONST(overrides?: CallOverrides): Promise<BigNumber>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createListing(
      token1Address: PromiseOrValue<string>,
      token2Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedCaller(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    posManagerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    priceToSqrtX96(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPositionManagerAddress(
      _posManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TICK_LOWER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TICK_UPPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIME_CONST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createListing(
      token1Address: PromiseOrValue<string>,
      token2Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    posManagerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceToSqrtX96(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPositionManagerAddress(
      _posManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
