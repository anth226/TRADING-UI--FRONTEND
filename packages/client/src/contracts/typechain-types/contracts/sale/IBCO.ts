/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IBCOInterface extends utils.Interface {
  functions: {
    "addTrustedAddress(address)": FunctionFragment;
    "amountFromWhitelisted()": FunctionFragment;
    "calcPrice()": FunctionFragment;
    "claim()": FunctionFragment;
    "collaterals(address)": FunctionFragment;
    "config(address,address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "daoAddress()": FunctionFragment;
    "daoAgentAddress()": FunctionFragment;
    "distributedBlx()": FunctionFragment;
    "duration()": FunctionFragment;
    "enterIbco(uint256)": FunctionFragment;
    "hardCap()": FunctionFragment;
    "hardCapReached()": FunctionFragment;
    "ibcoActive()": FunctionFragment;
    "ibcoEnd()": FunctionFragment;
    "isTrustedAddress(address)": FunctionFragment;
    "isTrustedCaller()": FunctionFragment;
    "minAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "refund()": FunctionFragment;
    "removeTrustedAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMinAmount(uint256)": FunctionFragment;
    "softCap()": FunctionFragment;
    "softCapReached()": FunctionFragment;
    "start()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToDaoAgent()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTrustedAddress"
      | "amountFromWhitelisted"
      | "calcPrice"
      | "claim"
      | "collaterals"
      | "config"
      | "daoAddress"
      | "daoAgentAddress"
      | "distributedBlx"
      | "duration"
      | "enterIbco"
      | "hardCap"
      | "hardCapReached"
      | "ibcoActive"
      | "ibcoEnd"
      | "isTrustedAddress"
      | "isTrustedCaller"
      | "minAmount"
      | "owner"
      | "refund"
      | "removeTrustedAddress"
      | "renounceOwnership"
      | "setMinAmount"
      | "softCap"
      | "softCapReached"
      | "start"
      | "transferOwnership"
      | "transferToDaoAgent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "amountFromWhitelisted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "calcPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collaterals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "config",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "daoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoAgentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributedBlx",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enterIbco",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "hardCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hardCapReached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ibcoActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ibcoEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedCaller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "softCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "softCapReached",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToDaoAgent",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountFromWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calcPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoAgentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributedBlx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enterIbco", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hardCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hardCapReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ibcoActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ibcoEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "softCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "softCapReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToDaoAgent",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface IBCO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBCOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    amountFromWhitelisted(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collaterals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        amountToClaim: BigNumber;
        redeemed: boolean;
      }
    >;

    config(
      _kycAddress: PromiseOrValue<string>,
      _presaleAddress: PromiseOrValue<string>,
      _daoAgentAddress: PromiseOrValue<string>,
      _daoAddress: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _softCap: PromiseOrValue<BigNumberish>,
      _hardCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<[string]>;

    daoAgentAddress(overrides?: CallOverrides): Promise<[string]>;

    distributedBlx(overrides?: CallOverrides): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    enterIbco(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    hardCapReached(overrides?: CallOverrides): Promise<[boolean]>;

    ibcoActive(overrides?: CallOverrides): Promise<[boolean]>;

    ibcoEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedCaller(overrides?: CallOverrides): Promise<[boolean]>;

    minAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    refund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    softCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    softCapReached(overrides?: CallOverrides): Promise<[boolean]>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToDaoAgent(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  amountFromWhitelisted(overrides?: CallOverrides): Promise<BigNumber>;

  calcPrice(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collaterals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      amountToClaim: BigNumber;
      redeemed: boolean;
    }
  >;

  config(
    _kycAddress: PromiseOrValue<string>,
    _presaleAddress: PromiseOrValue<string>,
    _daoAgentAddress: PromiseOrValue<string>,
    _daoAddress: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    _softCap: PromiseOrValue<BigNumberish>,
    _hardCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoAddress(overrides?: CallOverrides): Promise<string>;

  daoAgentAddress(overrides?: CallOverrides): Promise<string>;

  distributedBlx(overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  enterIbco(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hardCap(overrides?: CallOverrides): Promise<BigNumber>;

  hardCapReached(overrides?: CallOverrides): Promise<boolean>;

  ibcoActive(overrides?: CallOverrides): Promise<boolean>;

  ibcoEnd(overrides?: CallOverrides): Promise<BigNumber>;

  isTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

  minAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  refund(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  softCap(overrides?: CallOverrides): Promise<BigNumber>;

  softCapReached(overrides?: CallOverrides): Promise<boolean>;

  start(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToDaoAgent(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    amountFromWhitelisted(overrides?: CallOverrides): Promise<BigNumber>;

    calcPrice(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    collaterals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        amountToClaim: BigNumber;
        redeemed: boolean;
      }
    >;

    config(
      _kycAddress: PromiseOrValue<string>,
      _presaleAddress: PromiseOrValue<string>,
      _daoAgentAddress: PromiseOrValue<string>,
      _daoAddress: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _softCap: PromiseOrValue<BigNumberish>,
      _hardCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    daoAddress(overrides?: CallOverrides): Promise<string>;

    daoAgentAddress(overrides?: CallOverrides): Promise<string>;

    distributedBlx(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    enterIbco(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    hardCapReached(overrides?: CallOverrides): Promise<boolean>;

    ibcoActive(overrides?: CallOverrides): Promise<boolean>;

    ibcoEnd(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    refund(overrides?: CallOverrides): Promise<void>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMinAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    softCapReached(overrides?: CallOverrides): Promise<boolean>;

    start(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToDaoAgent(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    amountFromWhitelisted(overrides?: CallOverrides): Promise<BigNumber>;

    calcPrice(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collaterals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(
      _kycAddress: PromiseOrValue<string>,
      _presaleAddress: PromiseOrValue<string>,
      _daoAgentAddress: PromiseOrValue<string>,
      _daoAddress: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _softCap: PromiseOrValue<BigNumberish>,
      _hardCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    daoAgentAddress(overrides?: CallOverrides): Promise<BigNumber>;

    distributedBlx(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    enterIbco(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    hardCapReached(overrides?: CallOverrides): Promise<BigNumber>;

    ibcoActive(overrides?: CallOverrides): Promise<BigNumber>;

    ibcoEnd(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedCaller(overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    softCapReached(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToDaoAgent(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    amountFromWhitelisted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collaterals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(
      _kycAddress: PromiseOrValue<string>,
      _presaleAddress: PromiseOrValue<string>,
      _daoAgentAddress: PromiseOrValue<string>,
      _daoAddress: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _softCap: PromiseOrValue<BigNumberish>,
      _hardCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoAgentAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributedBlx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterIbco(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hardCapReached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ibcoActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ibcoEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    softCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    softCapReached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToDaoAgent(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
