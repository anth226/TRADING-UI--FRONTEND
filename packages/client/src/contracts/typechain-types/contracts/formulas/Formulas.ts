/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface FormulasInterface extends utils.Interface {
  functions: {
    "_0_15()": FunctionFragment;
    "_0_7()": FunctionFragment;
    "adj_coef(int128,int128)": FunctionFragment;
    "americanRisk(bool,uint256,int128,int128,int128)": FunctionFragment;
    "american_collateral_call_accurate(int128,int128,int128,uint256)": FunctionFragment;
    "american_collateral_call_put(int128,int128,int128,uint256)": FunctionFragment;
    "american_collateral_put_accurate(int128,int128,int128,uint256)": FunctionFragment;
    "american_price_call_put(int128,int128,int128)": FunctionFragment;
    "american_worse_price_call(int128,int128,uint256)": FunctionFragment;
    "american_worse_price_put(int128,int128,uint256)": FunctionFragment;
    "binary_call(int128,int128)": FunctionFragment;
    "binary_put(int128,int128)": FunctionFragment;
    "burnBlxIncrease(uint256,int128,uint256)": FunctionFragment;
    "dFactorOne(int128,int128,int128)": FunctionFragment;
    "dFactorTwo(int128,int128,int128)": FunctionFragment;
    "option_american_call(int128,int128,int128,int128)": FunctionFragment;
    "option_american_put(int128,int128,int128,int128)": FunctionFragment;
    "option_double_no_touch(int128,int128,int128,int128,int128)": FunctionFragment;
    "option_double_touch(int128,int128,int128,int128,int128)": FunctionFragment;
    "option_no_touch_call(int128,int128,int128,int128)": FunctionFragment;
    "option_no_touch_put(int128,int128,int128,int128)": FunctionFragment;
    "option_touch_call(int128,int128,int128,int128)": FunctionFragment;
    "option_touch_put(int128,int128,int128,int128)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFactorF(int128)": FunctionFragment;
    "stakeBlxIncrease(uint256,int128,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "turbo_barrier(int128,int128,bool)": FunctionFragment;
    "turbo_notional(int128,int128,int128,bool)": FunctionFragment;
    "volatilityFactor()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_0_15"
      | "_0_7"
      | "adj_coef"
      | "americanRisk"
      | "american_collateral_call_accurate"
      | "american_collateral_call_put"
      | "american_collateral_put_accurate"
      | "american_price_call_put"
      | "american_worse_price_call"
      | "american_worse_price_put"
      | "binary_call"
      | "binary_put"
      | "burnBlxIncrease"
      | "dFactorOne"
      | "dFactorTwo"
      | "option_american_call"
      | "option_american_put"
      | "option_double_no_touch"
      | "option_double_touch"
      | "option_no_touch_call"
      | "option_no_touch_put"
      | "option_touch_call"
      | "option_touch_put"
      | "owner"
      | "renounceOwnership"
      | "setFactorF"
      | "stakeBlxIncrease"
      | "transferOwnership"
      | "turbo_barrier"
      | "turbo_notional"
      | "volatilityFactor"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_0_15", values?: undefined): string;
  encodeFunctionData(functionFragment: "_0_7", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adj_coef",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "americanRisk",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "american_collateral_call_accurate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "american_collateral_call_put",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "american_collateral_put_accurate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "american_price_call_put",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "american_worse_price_call",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "american_worse_price_put",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "binary_call",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "binary_put",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBlxIncrease",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dFactorOne",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dFactorTwo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "option_american_call",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "option_american_put",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "option_double_no_touch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "option_double_touch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "option_no_touch_call",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "option_no_touch_put",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "option_touch_call",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "option_touch_put",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFactorF",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeBlxIncrease",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "turbo_barrier",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "turbo_notional",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "volatilityFactor",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_0_15", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_0_7", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adj_coef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "americanRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "american_collateral_call_accurate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "american_collateral_call_put",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "american_collateral_put_accurate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "american_price_call_put",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "american_worse_price_call",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "american_worse_price_put",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "binary_call",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "binary_put", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnBlxIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dFactorOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dFactorTwo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "option_american_call",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "option_american_put",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "option_double_no_touch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "option_double_touch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "option_no_touch_call",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "option_no_touch_put",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "option_touch_call",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "option_touch_put",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactorF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeBlxIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbo_barrier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbo_notional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volatilityFactor",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Formulas extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FormulasInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _0_15(overrides?: CallOverrides): Promise<[BigNumber]>;

    _0_7(overrides?: CallOverrides): Promise<[BigNumber]>;

    adj_coef(
      _r1: PromiseOrValue<BigNumberish>,
      _r2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    americanRisk(
      isCallType: PromiseOrValue<boolean>,
      maturity: PromiseOrValue<BigNumberish>,
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    american_collateral_call_accurate(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    american_collateral_call_put(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    american_collateral_put_accurate(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    american_price_call_put(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    american_worse_price_call(
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    american_worse_price_put(
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    binary_call(
      betAmount: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    binary_put(
      betAmount: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnBlxIncrease(
      blxAmount: PromiseOrValue<BigNumberish>,
      blxPrice: PromiseOrValue<BigNumberish>,
      totalLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dFactorOne(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dFactorTwo(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    option_american_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    option_american_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    option_double_no_touch(
      S: PromiseOrValue<BigNumberish>,
      KH: PromiseOrValue<BigNumberish>,
      KL: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    option_double_touch(
      S: PromiseOrValue<BigNumberish>,
      KH: PromiseOrValue<BigNumberish>,
      KL: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    option_no_touch_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    option_no_touch_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    option_touch_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    option_touch_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactorF(
      _fFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeBlxIncrease(
      blxAmount: PromiseOrValue<BigNumberish>,
      blxPrice: PromiseOrValue<BigNumberish>,
      totalLiquidity: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    turbo_barrier(
      leverage: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    turbo_notional(
      barrier: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      investment: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    volatilityFactor(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _0_15(overrides?: CallOverrides): Promise<BigNumber>;

  _0_7(overrides?: CallOverrides): Promise<BigNumber>;

  adj_coef(
    _r1: PromiseOrValue<BigNumberish>,
    _r2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  americanRisk(
    isCallType: PromiseOrValue<boolean>,
    maturity: PromiseOrValue<BigNumberish>,
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  american_collateral_call_accurate(
    N_lot: PromiseOrValue<BigNumberish>,
    S0: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  american_collateral_call_put(
    N_lot: PromiseOrValue<BigNumberish>,
    S0: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  american_collateral_put_accurate(
    N_lot: PromiseOrValue<BigNumberish>,
    S0: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  american_price_call_put(
    N_lot: PromiseOrValue<BigNumberish>,
    S0: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  american_worse_price_call(
    S0: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  american_worse_price_put(
    S0: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  binary_call(
    betAmount: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  binary_put(
    betAmount: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnBlxIncrease(
    blxAmount: PromiseOrValue<BigNumberish>,
    blxPrice: PromiseOrValue<BigNumberish>,
    totalLiquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dFactorOne(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dFactorTwo(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  option_american_call(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  option_american_put(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  option_double_no_touch(
    S: PromiseOrValue<BigNumberish>,
    KH: PromiseOrValue<BigNumberish>,
    KL: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  option_double_touch(
    S: PromiseOrValue<BigNumberish>,
    KH: PromiseOrValue<BigNumberish>,
    KL: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  option_no_touch_call(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  option_no_touch_put(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  option_touch_call(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  option_touch_put(
    S: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    hv: PromiseOrValue<BigNumberish>,
    betAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactorF(
    _fFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeBlxIncrease(
    blxAmount: PromiseOrValue<BigNumberish>,
    blxPrice: PromiseOrValue<BigNumberish>,
    totalLiquidity: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  turbo_barrier(
    leverage: PromiseOrValue<BigNumberish>,
    assetPrice: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  turbo_notional(
    barrier: PromiseOrValue<BigNumberish>,
    assetPrice: PromiseOrValue<BigNumberish>,
    investment: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  volatilityFactor(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _0_15(overrides?: CallOverrides): Promise<BigNumber>;

    _0_7(overrides?: CallOverrides): Promise<BigNumber>;

    adj_coef(
      _r1: PromiseOrValue<BigNumberish>,
      _r2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    americanRisk(
      isCallType: PromiseOrValue<boolean>,
      maturity: PromiseOrValue<BigNumberish>,
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_collateral_call_accurate(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_collateral_call_put(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_collateral_put_accurate(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_price_call_put(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_worse_price_call(
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_worse_price_put(
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    binary_call(
      betAmount: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    binary_put(
      betAmount: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnBlxIncrease(
      blxAmount: PromiseOrValue<BigNumberish>,
      blxPrice: PromiseOrValue<BigNumberish>,
      totalLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dFactorOne(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dFactorTwo(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_american_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_american_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_double_no_touch(
      S: PromiseOrValue<BigNumberish>,
      KH: PromiseOrValue<BigNumberish>,
      KL: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_double_touch(
      S: PromiseOrValue<BigNumberish>,
      KH: PromiseOrValue<BigNumberish>,
      KL: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_no_touch_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_no_touch_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_touch_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_touch_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFactorF(
      _fFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeBlxIncrease(
      blxAmount: PromiseOrValue<BigNumberish>,
      blxPrice: PromiseOrValue<BigNumberish>,
      totalLiquidity: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    turbo_barrier(
      leverage: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turbo_notional(
      barrier: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      investment: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    volatilityFactor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _0_15(overrides?: CallOverrides): Promise<BigNumber>;

    _0_7(overrides?: CallOverrides): Promise<BigNumber>;

    adj_coef(
      _r1: PromiseOrValue<BigNumberish>,
      _r2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    americanRisk(
      isCallType: PromiseOrValue<boolean>,
      maturity: PromiseOrValue<BigNumberish>,
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_collateral_call_accurate(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_collateral_call_put(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_collateral_put_accurate(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_price_call_put(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_worse_price_call(
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    american_worse_price_put(
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    binary_call(
      betAmount: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    binary_put(
      betAmount: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnBlxIncrease(
      blxAmount: PromiseOrValue<BigNumberish>,
      blxPrice: PromiseOrValue<BigNumberish>,
      totalLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dFactorOne(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dFactorTwo(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_american_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_american_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_double_no_touch(
      S: PromiseOrValue<BigNumberish>,
      KH: PromiseOrValue<BigNumberish>,
      KL: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_double_touch(
      S: PromiseOrValue<BigNumberish>,
      KH: PromiseOrValue<BigNumberish>,
      KL: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_no_touch_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_no_touch_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_touch_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    option_touch_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactorF(
      _fFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeBlxIncrease(
      blxAmount: PromiseOrValue<BigNumberish>,
      blxPrice: PromiseOrValue<BigNumberish>,
      totalLiquidity: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    turbo_barrier(
      leverage: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turbo_notional(
      barrier: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      investment: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    volatilityFactor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _0_15(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _0_7(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adj_coef(
      _r1: PromiseOrValue<BigNumberish>,
      _r2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    americanRisk(
      isCallType: PromiseOrValue<boolean>,
      maturity: PromiseOrValue<BigNumberish>,
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    american_collateral_call_accurate(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    american_collateral_call_put(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    american_collateral_put_accurate(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    american_price_call_put(
      N_lot: PromiseOrValue<BigNumberish>,
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    american_worse_price_call(
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    american_worse_price_put(
      S0: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    binary_call(
      betAmount: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    binary_put(
      betAmount: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnBlxIncrease(
      blxAmount: PromiseOrValue<BigNumberish>,
      blxPrice: PromiseOrValue<BigNumberish>,
      totalLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dFactorOne(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dFactorTwo(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    option_american_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    option_american_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    option_double_no_touch(
      S: PromiseOrValue<BigNumberish>,
      KH: PromiseOrValue<BigNumberish>,
      KL: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    option_double_touch(
      S: PromiseOrValue<BigNumberish>,
      KH: PromiseOrValue<BigNumberish>,
      KL: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    option_no_touch_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    option_no_touch_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    option_touch_call(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    option_touch_put(
      S: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      hv: PromiseOrValue<BigNumberish>,
      betAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactorF(
      _fFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeBlxIncrease(
      blxAmount: PromiseOrValue<BigNumberish>,
      blxPrice: PromiseOrValue<BigNumberish>,
      totalLiquidity: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    turbo_barrier(
      leverage: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbo_notional(
      barrier: PromiseOrValue<BigNumberish>,
      assetPrice: PromiseOrValue<BigNumberish>,
      investment: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volatilityFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
