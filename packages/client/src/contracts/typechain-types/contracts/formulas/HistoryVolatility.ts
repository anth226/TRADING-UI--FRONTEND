/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface HistoryVolatilityInterface extends utils.Interface {
  functions: {
    "DEFAULT_WINDOW_SIZE()": FunctionFragment;
    "addDerivative(string,string)": FunctionFragment;
    "addMultipleDerivatives(string[],string[])": FunctionFragment;
    "allowOperator(address)": FunctionFragment;
    "derivatives(uint256)": FunctionFragment;
    "getCountDerivative()": FunctionFragment;
    "getDerivative(uint256)": FunctionFragment;
    "getDerivativePrice(uint256)": FunctionFragment;
    "getHistoryVolatility(uint256)": FunctionFragment;
    "getScaledVolatility(uint256,uint256)": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeOperator(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setHistoryVolatility(uint256,int128)": FunctionFragment;
    "setMultipleHistoryVolatility(int128[])": FunctionFragment;
    "setWindowSize(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePrices(uint256[])": FunctionFragment;
    "updateSinglePrice(uint256,uint256)": FunctionFragment;
    "windowSize()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_WINDOW_SIZE"
      | "addDerivative"
      | "addMultipleDerivatives"
      | "allowOperator"
      | "derivatives"
      | "getCountDerivative"
      | "getDerivative"
      | "getDerivativePrice"
      | "getHistoryVolatility"
      | "getScaledVolatility"
      | "isOperator"
      | "owner"
      | "removeOperator"
      | "renounceOwnership"
      | "setHistoryVolatility"
      | "setMultipleHistoryVolatility"
      | "setWindowSize"
      | "transferOwnership"
      | "updatePrices"
      | "updateSinglePrice"
      | "windowSize"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_WINDOW_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDerivative",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMultipleDerivatives",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "derivatives",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountDerivative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivative",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDerivativePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoryVolatility",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getScaledVolatility",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHistoryVolatility",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultipleHistoryVolatility",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setWindowSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrices",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSinglePrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "windowSize",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_WINDOW_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDerivative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMultipleDerivatives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "derivatives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountDerivative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDerivativePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoryVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScaledVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHistoryVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultipleHistoryVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWindowSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSinglePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "windowSize", data: BytesLike): Result;

  events: {
    "AddNewDerivative(string,string)": EventFragment;
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetHistoryVolatility(uint256,int128)": EventFragment;
    "SetPrice(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddNewDerivative"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHistoryVolatility"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPrice"): EventFragment;
}

export interface AddNewDerivativeEventObject {
  market: string;
  symbol: string;
}
export type AddNewDerivativeEvent = TypedEvent<
  [string, string],
  AddNewDerivativeEventObject
>;

export type AddNewDerivativeEventFilter =
  TypedEventFilter<AddNewDerivativeEvent>;

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetHistoryVolatilityEventObject {
  productId: BigNumber;
  value: BigNumber;
}
export type SetHistoryVolatilityEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetHistoryVolatilityEventObject
>;

export type SetHistoryVolatilityEventFilter =
  TypedEventFilter<SetHistoryVolatilityEvent>;

export interface SetPriceEventObject {
  id: BigNumber;
  price: BigNumber;
}
export type SetPriceEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetPriceEventObject
>;

export type SetPriceEventFilter = TypedEventFilter<SetPriceEvent>;

export interface HistoryVolatility extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HistoryVolatilityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_WINDOW_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addDerivative(
      _market: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMultipleDerivatives(
      markets: PromiseOrValue<string>[],
      symbols: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    derivatives(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        price: BigNumber;
        historyVolatility: BigNumber;
        symbol: string;
        market: string;
      }
    >;

    getCountDerivative(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDerivative(
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string, string]>;

    getDerivativePrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHistoryVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getScaledVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      _maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHistoryVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      _historyVolatility: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMultipleHistoryVolatility(
      _historyVolatility: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWindowSize(
      newWindowSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrices(
      newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSinglePrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    windowSize(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_WINDOW_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  addDerivative(
    _market: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMultipleDerivatives(
    markets: PromiseOrValue<string>[],
    symbols: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  derivatives(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      price: BigNumber;
      historyVolatility: BigNumber;
      symbol: string;
      market: string;
    }
  >;

  getCountDerivative(overrides?: CallOverrides): Promise<BigNumber>;

  getDerivative(
    derivativeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string, string]>;

  getDerivativePrice(
    derivativeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHistoryVolatility(
    _derivativeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getScaledVolatility(
    _derivativeId: PromiseOrValue<BigNumberish>,
    _maturity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOperator(
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHistoryVolatility(
    _derivativeId: PromiseOrValue<BigNumberish>,
    _historyVolatility: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMultipleHistoryVolatility(
    _historyVolatility: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWindowSize(
    newWindowSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrices(
    newPrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSinglePrice(
    derivativeId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  windowSize(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_WINDOW_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    addDerivative(
      _market: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMultipleDerivatives(
      markets: PromiseOrValue<string>[],
      symbols: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    derivatives(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        price: BigNumber;
        historyVolatility: BigNumber;
        symbol: string;
        market: string;
      }
    >;

    getCountDerivative(overrides?: CallOverrides): Promise<BigNumber>;

    getDerivative(
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string, string]>;

    getDerivativePrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHistoryVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScaledVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      _maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setHistoryVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      _historyVolatility: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultipleHistoryVolatility(
      _historyVolatility: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setWindowSize(
      newWindowSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrices(
      newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSinglePrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    windowSize(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddNewDerivative(string,string)"(
      market?: null,
      symbol?: null
    ): AddNewDerivativeEventFilter;
    AddNewDerivative(market?: null, symbol?: null): AddNewDerivativeEventFilter;

    "ChainlinkCancelled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetHistoryVolatility(uint256,int128)"(
      productId?: null,
      value?: null
    ): SetHistoryVolatilityEventFilter;
    SetHistoryVolatility(
      productId?: null,
      value?: null
    ): SetHistoryVolatilityEventFilter;

    "SetPrice(uint256,uint256)"(id?: null, price?: null): SetPriceEventFilter;
    SetPrice(id?: null, price?: null): SetPriceEventFilter;
  };

  estimateGas: {
    DEFAULT_WINDOW_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    addDerivative(
      _market: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMultipleDerivatives(
      markets: PromiseOrValue<string>[],
      symbols: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    derivatives(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountDerivative(overrides?: CallOverrides): Promise<BigNumber>;

    getDerivative(
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDerivativePrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHistoryVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScaledVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      _maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHistoryVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      _historyVolatility: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMultipleHistoryVolatility(
      _historyVolatility: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWindowSize(
      newWindowSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrices(
      newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSinglePrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    windowSize(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_WINDOW_SIZE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addDerivative(
      _market: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMultipleDerivatives(
      markets: PromiseOrValue<string>[],
      symbols: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    derivatives(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCountDerivative(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDerivative(
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDerivativePrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHistoryVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScaledVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      _maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHistoryVolatility(
      _derivativeId: PromiseOrValue<BigNumberish>,
      _historyVolatility: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMultipleHistoryVolatility(
      _historyVolatility: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWindowSize(
      newWindowSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrices(
      newPrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSinglePrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    windowSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
