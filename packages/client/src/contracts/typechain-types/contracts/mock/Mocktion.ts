/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MocktionInterface extends utils.Interface {
  functions: {
    "_betAdd(bytes32,uint256,uint256,address,string)": FunctionFragment;
    "_betClose(bytes32,uint256,uint256)": FunctionFragment;
    "_betCloseTouch(bytes32,uint256,uint256,uint256,uint256)": FunctionFragment;
    "betAdd(string,string,uint256)": FunctionFragment;
    "betClose(string,string,uint256)": FunctionFragment;
    "betCloseTouch(string,string,uint256)": FunctionFragment;
    "betId()": FunctionFragment;
    "bets(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "history()": FunctionFragment;
    "jobId()": FunctionFragment;
    "oracle()": FunctionFragment;
    "price()": FunctionFragment;
    "result()": FunctionFragment;
    "setJobId(string)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "stringToBytes32(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_betAdd"
      | "_betClose"
      | "_betCloseTouch"
      | "betAdd"
      | "betClose"
      | "betCloseTouch"
      | "betId"
      | "bets"
      | "fee"
      | "history"
      | "jobId"
      | "oracle"
      | "price"
      | "result"
      | "setJobId"
      | "setOracle"
      | "stringToBytes32"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_betAdd",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_betClose",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_betCloseTouch",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "betAdd",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "betClose",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "betCloseTouch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "betId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "history", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobId", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(functionFragment: "result", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setJobId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "_betAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_betClose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_betCloseTouch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betClose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "betCloseTouch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "history", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "result", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setJobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
}

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface Mocktion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MocktionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _betAdd(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      _investment: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _betClose(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _betCloseTouch(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    betAdd(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    betClose(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    betCloseTouch(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    betId(overrides?: CallOverrides): Promise<[BigNumber]>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        trader: string;
        investment: BigNumber;
        payoff: BigNumber;
        symbol: string;
        timeOpen: BigNumber;
        priceOpen: BigNumber;
        priceClose: BigNumber;
        min: BigNumber;
        max: BigNumber;
        status: string;
      }
    >;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    history(overrides?: CallOverrides): Promise<[BigNumber]>;

    jobId(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    result(overrides?: CallOverrides): Promise<[BigNumber]>;

    setJobId(
      _jobId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringToBytes32(
      source: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { _result: string }>;
  };

  _betAdd(
    _requestId: PromiseOrValue<BytesLike>,
    _price: PromiseOrValue<BigNumberish>,
    _investment: PromiseOrValue<BigNumberish>,
    _trader: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _betClose(
    _requestId: PromiseOrValue<BytesLike>,
    _price: PromiseOrValue<BigNumberish>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _betCloseTouch(
    _requestId: PromiseOrValue<BytesLike>,
    _price: PromiseOrValue<BigNumberish>,
    _min: PromiseOrValue<BigNumberish>,
    _max: PromiseOrValue<BigNumberish>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  betAdd(
    market: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    investment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  betClose(
    market: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  betCloseTouch(
    market: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  betId(overrides?: CallOverrides): Promise<BigNumber>;

  bets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      trader: string;
      investment: BigNumber;
      payoff: BigNumber;
      symbol: string;
      timeOpen: BigNumber;
      priceOpen: BigNumber;
      priceClose: BigNumber;
      min: BigNumber;
      max: BigNumber;
      status: string;
    }
  >;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  history(overrides?: CallOverrides): Promise<BigNumber>;

  jobId(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  result(overrides?: CallOverrides): Promise<BigNumber>;

  setJobId(
    _jobId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringToBytes32(
    source: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    _betAdd(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      _investment: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _betClose(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _betCloseTouch(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    betAdd(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    betClose(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    betCloseTouch(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    betId(overrides?: CallOverrides): Promise<BigNumber>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        trader: string;
        investment: BigNumber;
        payoff: BigNumber;
        symbol: string;
        timeOpen: BigNumber;
        priceOpen: BigNumber;
        priceClose: BigNumber;
        min: BigNumber;
        max: BigNumber;
        status: string;
      }
    >;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    history(overrides?: CallOverrides): Promise<BigNumber>;

    jobId(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    result(overrides?: CallOverrides): Promise<BigNumber>;

    setJobId(
      _jobId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stringToBytes32(
      source: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
  };

  estimateGas: {
    _betAdd(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      _investment: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _betClose(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _betCloseTouch(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    betAdd(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    betClose(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    betCloseTouch(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    betId(overrides?: CallOverrides): Promise<BigNumber>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    history(overrides?: CallOverrides): Promise<BigNumber>;

    jobId(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    result(overrides?: CallOverrides): Promise<BigNumber>;

    setJobId(
      _jobId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringToBytes32(
      source: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _betAdd(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      _investment: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _betClose(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _betCloseTouch(
      _requestId: PromiseOrValue<BytesLike>,
      _price: PromiseOrValue<BigNumberish>,
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    betAdd(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    betClose(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    betCloseTouch(
      market: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    betId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    history(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    result(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setJobId(
      _jobId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringToBytes32(
      source: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
