/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MockOracleInterface extends utils.Interface {
  functions: {
    "callbackAddress()": FunctionFragment;
    "data()": FunctionFragment;
    "fulfillOracleRequest(bytes)": FunctionFragment;
    "func()": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": FunctionFragment;
    "requestId()": FunctionFragment;
    "sender()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "callbackAddress"
      | "data"
      | "fulfillOracleRequest"
      | "func"
      | "onTokenTransfer"
      | "oracleRequest"
      | "requestId"
      | "sender"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "callbackAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfillOracleRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "func", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "requestId", values?: undefined): string;
  encodeFunctionData(functionFragment: "sender", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "callbackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "func", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;

  events: {};
}

export interface MockOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    callbackAddress(overrides?: CallOverrides): Promise<[string]>;

    data(overrides?: CallOverrides): Promise<[string]>;

    fulfillOracleRequest(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    func(overrides?: CallOverrides): Promise<[string]>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracleRequest(
      _sender: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      _specId: PromiseOrValue<BytesLike>,
      _callbackAddress: PromiseOrValue<string>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _dataVersion: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestId(overrides?: CallOverrides): Promise<[string]>;

    sender(overrides?: CallOverrides): Promise<[string]>;
  };

  callbackAddress(overrides?: CallOverrides): Promise<string>;

  data(overrides?: CallOverrides): Promise<string>;

  fulfillOracleRequest(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  func(overrides?: CallOverrides): Promise<string>;

  onTokenTransfer(
    sender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracleRequest(
    _sender: PromiseOrValue<string>,
    _payment: PromiseOrValue<BigNumberish>,
    _specId: PromiseOrValue<BytesLike>,
    _callbackAddress: PromiseOrValue<string>,
    _callbackFunctionId: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    _dataVersion: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestId(overrides?: CallOverrides): Promise<string>;

  sender(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    callbackAddress(overrides?: CallOverrides): Promise<string>;

    data(overrides?: CallOverrides): Promise<string>;

    fulfillOracleRequest(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    func(overrides?: CallOverrides): Promise<string>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleRequest(
      _sender: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      _specId: PromiseOrValue<BytesLike>,
      _callbackAddress: PromiseOrValue<string>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _dataVersion: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestId(overrides?: CallOverrides): Promise<string>;

    sender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    callbackAddress(overrides?: CallOverrides): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillOracleRequest(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    func(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracleRequest(
      _sender: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      _specId: PromiseOrValue<BytesLike>,
      _callbackAddress: PromiseOrValue<string>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _dataVersion: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestId(overrides?: CallOverrides): Promise<BigNumber>;

    sender(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    callbackAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillOracleRequest(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    func(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracleRequest(
      _sender: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      _specId: PromiseOrValue<BytesLike>,
      _callbackAddress: PromiseOrValue<string>,
      _callbackFunctionId: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _dataVersion: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
