/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface StakingContractInterface extends utils.Interface {
  functions: {
    "BLX()": FunctionFragment;
    "DAY()": FunctionFragment;
    "MAX_LOCK_DURATION_WEEKS()": FunctionFragment;
    "PCTS_MAX_VALUES()": FunctionFragment;
    "PCTS_USDC_BLX_MAX_LOCK()": FunctionFragment;
    "PCTS_USDC_BLX_NO_LOCK()": FunctionFragment;
    "PCTS_USDC_MAX_LOCK()": FunctionFragment;
    "PCTS_USDC_NO_LOCK()": FunctionFragment;
    "PCT_BASE()": FunctionFragment;
    "PCT_BURN_DEFAULT()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "USD()": FunctionFragment;
    "WEEK_PERIOD()": FunctionFragment;
    "YEAR_PERIOD()": FunctionFragment;
    "_getReward(address)": FunctionFragment;
    "_stake(address,uint256)": FunctionFragment;
    "_withdraw(address,uint256)": FunctionFragment;
    "addTrustedAddress(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculatePayoutIncrease(address)": FunctionFragment;
    "calculateUserPayout(address,uint256,uint256,uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "configure(address,address,address,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "earned(address)": FunctionFragment;
    "formulas()": FunctionFragment;
    "getPercents(uint256)": FunctionFragment;
    "getRewardForDuration()": FunctionFragment;
    "getTotalUsdStake()": FunctionFragment;
    "getUserPercents(address)": FunctionFragment;
    "isLocked(address)": FunctionFragment;
    "isTrustedAddress(address)": FunctionFragment;
    "isTrustedCaller()": FunctionFragment;
    "lastTimeRewardApplicable()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "lockWithBurn(uint256)": FunctionFragment;
    "minBlxAmount()": FunctionFragment;
    "minUsdAmount()": FunctionFragment;
    "notifyRewardAmount(uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pctBurn()": FunctionFragment;
    "pctsUsdcBlxMaxLock()": FunctionFragment;
    "pctsUsdcBlxNoLock()": FunctionFragment;
    "pctsUsdcMaxLock()": FunctionFragment;
    "pctsUsdcNoLock()": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "removeTrustedAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "rewardsDistribution()": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "rewardsToken()": FunctionFragment;
    "setMinBlxAmount(uint256)": FunctionFragment;
    "setMinUsdAmount(uint256)": FunctionFragment;
    "setRewardsDistribution(address)": FunctionFragment;
    "splitReward(address,uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "totalStake(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "userRewardPerTokenPaid(address)": FunctionFragment;
    "userStakes(address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BLX"
      | "DAY"
      | "MAX_LOCK_DURATION_WEEKS"
      | "PCTS_MAX_VALUES"
      | "PCTS_USDC_BLX_MAX_LOCK"
      | "PCTS_USDC_BLX_NO_LOCK"
      | "PCTS_USDC_MAX_LOCK"
      | "PCTS_USDC_NO_LOCK"
      | "PCT_BASE"
      | "PCT_BURN_DEFAULT"
      | "PRECISION"
      | "USD"
      | "WEEK_PERIOD"
      | "YEAR_PERIOD"
      | "_getReward"
      | "_stake"
      | "_withdraw"
      | "addTrustedAddress"
      | "balanceOf"
      | "calculatePayoutIncrease"
      | "calculateUserPayout"
      | "claimReward"
      | "configure"
      | "deposit"
      | "earned"
      | "formulas"
      | "getPercents"
      | "getRewardForDuration"
      | "getTotalUsdStake"
      | "getUserPercents"
      | "isLocked"
      | "isTrustedAddress"
      | "isTrustedCaller"
      | "lastTimeRewardApplicable"
      | "lastUpdateTime"
      | "lock"
      | "lockWithBurn"
      | "minBlxAmount"
      | "minUsdAmount"
      | "notifyRewardAmount"
      | "owner"
      | "pause"
      | "paused"
      | "pctBurn"
      | "pctsUsdcBlxMaxLock"
      | "pctsUsdcBlxNoLock"
      | "pctsUsdcMaxLock"
      | "pctsUsdcNoLock"
      | "periodFinish"
      | "priceOracle"
      | "removeTrustedAddress"
      | "renounceOwnership"
      | "rewardPerToken"
      | "rewardPerTokenStored"
      | "rewardRate"
      | "rewards"
      | "rewardsDistribution"
      | "rewardsDuration"
      | "rewardsToken"
      | "setMinBlxAmount"
      | "setMinUsdAmount"
      | "setRewardsDistribution"
      | "splitReward"
      | "stakingToken"
      | "totalStake"
      | "totalSupply"
      | "transferOwnership"
      | "treasury"
      | "unpause"
      | "userRewardPerTokenPaid"
      | "userStakes"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BLX", values?: undefined): string;
  encodeFunctionData(functionFragment: "DAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_LOCK_DURATION_WEEKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PCTS_MAX_VALUES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PCTS_USDC_BLX_MAX_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PCTS_USDC_BLX_NO_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PCTS_USDC_MAX_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PCTS_USDC_NO_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PCT_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PCT_BURN_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "USD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WEEK_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YEAR_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_stake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePayoutIncrease",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUserPayout",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "formulas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPercents",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsdStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPercents",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLocked",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockWithBurn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minBlxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minUsdAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pctBurn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pctsUsdcBlxMaxLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pctsUsdcBlxNoLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pctsUsdcMaxLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pctsUsdcNoLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBlxAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinUsdAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDistribution",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "splitReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "BLX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LOCK_DURATION_WEEKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PCTS_MAX_VALUES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PCTS_USDC_BLX_MAX_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PCTS_USDC_BLX_NO_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PCTS_USDC_MAX_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PCTS_USDC_NO_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PCT_BASE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PCT_BURN_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WEEK_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "YEAR_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePayoutIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUserPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "formulas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsdStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockWithBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minUsdAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pctBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pctsUsdcBlxMaxLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pctsUsdcBlxNoLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pctsUsdcMaxLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pctsUsdcNoLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBlxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinUsdAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "LockApplied(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardAdded(uint256)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "StakeAdded(address,uint256,uint256)": EventFragment;
    "StakeWithdrawn(address,uint256,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LockAppliedEventObject {
  user: string;
  duration: BigNumber;
}
export type LockAppliedEvent = TypedEvent<
  [string, BigNumber],
  LockAppliedEventObject
>;

export type LockAppliedEventFilter = TypedEventFilter<LockAppliedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardAddedEventObject {
  reward: BigNumber;
}
export type RewardAddedEvent = TypedEvent<[BigNumber], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardPaidEventObject {
  account: string;
  reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<
  [string, BigNumber],
  RewardPaidEventObject
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface StakeAddedEventObject {
  user: string;
  usdAmount: BigNumber;
  blxAmount: BigNumber;
}
export type StakeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeAddedEventObject
>;

export type StakeAddedEventFilter = TypedEventFilter<StakeAddedEvent>;

export interface StakeWithdrawnEventObject {
  user: string;
  usdAmount: BigNumber;
  blxAmount: BigNumber;
}
export type StakeWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeWithdrawnEventObject
>;

export type StakeWithdrawnEventFilter = TypedEventFilter<StakeWithdrawnEvent>;

export interface StakedEventObject {
  account: string;
  amount: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawnEventObject {
  account: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface StakingContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLX(overrides?: CallOverrides): Promise<[string]>;

    DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LOCK_DURATION_WEEKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCTS_MAX_VALUES(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCTS_USDC_BLX_MAX_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCTS_USDC_BLX_NO_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCTS_USDC_MAX_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCTS_USDC_NO_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCT_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCT_BURN_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USD(overrides?: CallOverrides): Promise<[string]>;

    WEEK_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    YEAR_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    _getReward(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _stake(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _withdraw(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePayoutIncrease(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateUserPayout(
      account: PromiseOrValue<string>,
      profitDigital: PromiseOrValue<BigNumberish>,
      profitAmerican: PromiseOrValue<BigNumberish>,
      profitTurbo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { payout: BigNumber }>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configure(
      _priceOracle: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _formulas: PromiseOrValue<string>,
      _rewardsDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      usdAmount: PromiseOrValue<BigNumberish>,
      blxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { user: BigNumber }>;

    formulas(overrides?: CallOverrides): Promise<[string]>;

    getPercents(
      column: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getRewardForDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalUsdStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserPercents(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        d: BigNumber;
        a: BigNumber;
        m: BigNumber;
      }
    >;

    isLocked(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedCaller(overrides?: CallOverrides): Promise<[boolean]>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockWithBurn(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minBlxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minUsdAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyRewardAmount(
      digital: PromiseOrValue<BigNumberish>,
      american: PromiseOrValue<BigNumberish>,
      turbo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pctBurn(overrides?: CallOverrides): Promise<[BigNumber]>;

    pctsUsdcBlxMaxLock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        american: BigNumber;
        digital: BigNumber;
        turbos: BigNumber;
      }
    >;

    pctsUsdcBlxNoLock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        american: BigNumber;
        digital: BigNumber;
        turbos: BigNumber;
      }
    >;

    pctsUsdcMaxLock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        american: BigNumber;
        digital: BigNumber;
        turbos: BigNumber;
      }
    >;

    pctsUsdcNoLock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        american: BigNumber;
        digital: BigNumber;
        turbos: BigNumber;
      }
    >;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsDistribution(overrides?: CallOverrides): Promise<[string]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    setMinBlxAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinUsdAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsDistribution(
      _rewardsDistribution: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitReward(
      account: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    totalStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userStakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        usdAmount: BigNumber;
        blxAmount: BigNumber;
        burnedBlxAmount: BigNumber;
        lockDuration: BigNumber;
        unlockDate: BigNumber;
        lockedBlxPrice: BigNumber;
      }
    >;

    withdraw(
      usdAmount: PromiseOrValue<BigNumberish>,
      blxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BLX(overrides?: CallOverrides): Promise<string>;

  DAY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LOCK_DURATION_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

  PCTS_MAX_VALUES(overrides?: CallOverrides): Promise<BigNumber>;

  PCTS_USDC_BLX_MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  PCTS_USDC_BLX_NO_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  PCTS_USDC_MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  PCTS_USDC_NO_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  PCT_BURN_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USD(overrides?: CallOverrides): Promise<string>;

  WEEK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  YEAR_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  _getReward(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _stake(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _withdraw(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePayoutIncrease(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateUserPayout(
    account: PromiseOrValue<string>,
    profitDigital: PromiseOrValue<BigNumberish>,
    profitAmerican: PromiseOrValue<BigNumberish>,
    profitTurbo: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configure(
    _priceOracle: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    _formulas: PromiseOrValue<string>,
    _rewardsDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    usdAmount: PromiseOrValue<BigNumberish>,
    blxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  earned(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  formulas(overrides?: CallOverrides): Promise<string>;

  getPercents(
    column: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalUsdStake(overrides?: CallOverrides): Promise<BigNumber>;

  getUserPercents(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      d: BigNumber;
      a: BigNumber;
      m: BigNumber;
    }
  >;

  isLocked(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  lock(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockWithBurn(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minBlxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minUsdAmount(overrides?: CallOverrides): Promise<BigNumber>;

  notifyRewardAmount(
    digital: PromiseOrValue<BigNumberish>,
    american: PromiseOrValue<BigNumberish>,
    turbo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pctBurn(overrides?: CallOverrides): Promise<BigNumber>;

  pctsUsdcBlxMaxLock(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      american: BigNumber;
      digital: BigNumber;
      turbos: BigNumber;
    }
  >;

  pctsUsdcBlxNoLock(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      american: BigNumber;
      digital: BigNumber;
      turbos: BigNumber;
    }
  >;

  pctsUsdcMaxLock(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      american: BigNumber;
      digital: BigNumber;
      turbos: BigNumber;
    }
  >;

  pctsUsdcNoLock(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      american: BigNumber;
      digital: BigNumber;
      turbos: BigNumber;
    }
  >;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  removeTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsDistribution(overrides?: CallOverrides): Promise<string>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsToken(overrides?: CallOverrides): Promise<string>;

  setMinBlxAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinUsdAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsDistribution(
    _rewardsDistribution: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitReward(
    account: PromiseOrValue<string>,
    reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  totalStake(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userRewardPerTokenPaid(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userStakes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      usdAmount: BigNumber;
      blxAmount: BigNumber;
      burnedBlxAmount: BigNumber;
      lockDuration: BigNumber;
      unlockDate: BigNumber;
      lockedBlxPrice: BigNumber;
    }
  >;

  withdraw(
    usdAmount: PromiseOrValue<BigNumberish>,
    blxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BLX(overrides?: CallOverrides): Promise<string>;

    DAY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_MAX_VALUES(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_USDC_BLX_MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_USDC_BLX_NO_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_USDC_MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_USDC_NO_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BURN_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USD(overrides?: CallOverrides): Promise<string>;

    WEEK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _getReward(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _stake(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _withdraw(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePayoutIncrease(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUserPayout(
      account: PromiseOrValue<string>,
      profitDigital: PromiseOrValue<BigNumberish>,
      profitAmerican: PromiseOrValue<BigNumberish>,
      profitTurbo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    configure(
      _priceOracle: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _formulas: PromiseOrValue<string>,
      _rewardsDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      usdAmount: PromiseOrValue<BigNumberish>,
      blxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formulas(overrides?: CallOverrides): Promise<string>;

    getPercents(
      column: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUsdStake(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPercents(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        d: BigNumber;
        a: BigNumber;
        m: BigNumber;
      }
    >;

    isLocked(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lockWithBurn(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    minBlxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minUsdAmount(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      digital: PromiseOrValue<BigNumberish>,
      american: PromiseOrValue<BigNumberish>,
      turbo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pctBurn(overrides?: CallOverrides): Promise<BigNumber>;

    pctsUsdcBlxMaxLock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        american: BigNumber;
        digital: BigNumber;
        turbos: BigNumber;
      }
    >;

    pctsUsdcBlxNoLock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        american: BigNumber;
        digital: BigNumber;
        turbos: BigNumber;
      }
    >;

    pctsUsdcMaxLock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        american: BigNumber;
        digital: BigNumber;
        turbos: BigNumber;
      }
    >;

    pctsUsdcNoLock(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        american: BigNumber;
        digital: BigNumber;
        turbos: BigNumber;
      }
    >;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDistribution(overrides?: CallOverrides): Promise<string>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<string>;

    setMinBlxAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinUsdAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsDistribution(
      _rewardsDistribution: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    splitReward(
      account: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        userReward: BigNumber;
        platformReward: BigNumber;
      }
    >;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    totalStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        usdAmount: BigNumber;
        blxAmount: BigNumber;
        burnedBlxAmount: BigNumber;
        lockDuration: BigNumber;
        unlockDate: BigNumber;
        lockedBlxPrice: BigNumber;
      }
    >;

    withdraw(
      usdAmount: PromiseOrValue<BigNumberish>,
      blxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LockApplied(address,uint256)"(
      user?: null,
      duration?: null
    ): LockAppliedEventFilter;
    LockApplied(user?: null, duration?: null): LockAppliedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardAdded(uint256)"(reward?: null): RewardAddedEventFilter;
    RewardAdded(reward?: null): RewardAddedEventFilter;

    "RewardPaid(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      account?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;

    "StakeAdded(address,uint256,uint256)"(
      user?: null,
      usdAmount?: null,
      blxAmount?: null
    ): StakeAddedEventFilter;
    StakeAdded(
      user?: null,
      usdAmount?: null,
      blxAmount?: null
    ): StakeAddedEventFilter;

    "StakeWithdrawn(address,uint256,uint256)"(
      user?: null,
      usdAmount?: null,
      blxAmount?: null
    ): StakeWithdrawnEventFilter;
    StakeWithdrawn(
      user?: null,
      usdAmount?: null,
      blxAmount?: null
    ): StakeWithdrawnEventFilter;

    "Staked(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedEventFilter;
    Staked(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdrawn(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    BLX(overrides?: CallOverrides): Promise<BigNumber>;

    DAY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION_WEEKS(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_MAX_VALUES(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_USDC_BLX_MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_USDC_BLX_NO_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_USDC_MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    PCTS_USDC_NO_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BURN_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USD(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    _getReward(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _stake(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _withdraw(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePayoutIncrease(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUserPayout(
      account: PromiseOrValue<string>,
      profitDigital: PromiseOrValue<BigNumberish>,
      profitAmerican: PromiseOrValue<BigNumberish>,
      profitTurbo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configure(
      _priceOracle: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _formulas: PromiseOrValue<string>,
      _rewardsDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      usdAmount: PromiseOrValue<BigNumberish>,
      blxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formulas(overrides?: CallOverrides): Promise<BigNumber>;

    getPercents(
      column: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUsdStake(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPercents(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocked(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedCaller(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockWithBurn(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minBlxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minUsdAmount(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      digital: PromiseOrValue<BigNumberish>,
      american: PromiseOrValue<BigNumberish>,
      turbo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pctBurn(overrides?: CallOverrides): Promise<BigNumber>;

    pctsUsdcBlxMaxLock(overrides?: CallOverrides): Promise<BigNumber>;

    pctsUsdcBlxNoLock(overrides?: CallOverrides): Promise<BigNumber>;

    pctsUsdcMaxLock(overrides?: CallOverrides): Promise<BigNumber>;

    pctsUsdcNoLock(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    setMinBlxAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinUsdAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsDistribution(
      _rewardsDistribution: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitReward(
      account: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      usdAmount: PromiseOrValue<BigNumberish>,
      blxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BLX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LOCK_DURATION_WEEKS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PCTS_MAX_VALUES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCTS_USDC_BLX_MAX_LOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PCTS_USDC_BLX_NO_LOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PCTS_USDC_MAX_LOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PCTS_USDC_NO_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCT_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCT_BURN_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEEK_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YEAR_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getReward(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _stake(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _withdraw(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePayoutIncrease(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUserPayout(
      account: PromiseOrValue<string>,
      profitDigital: PromiseOrValue<BigNumberish>,
      profitAmerican: PromiseOrValue<BigNumberish>,
      profitTurbo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configure(
      _priceOracle: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _formulas: PromiseOrValue<string>,
      _rewardsDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      usdAmount: PromiseOrValue<BigNumberish>,
      blxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    formulas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPercents(
      column: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUsdStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserPercents(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocked(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockWithBurn(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minBlxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minUsdAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      digital: PromiseOrValue<BigNumberish>,
      american: PromiseOrValue<BigNumberish>,
      turbo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pctBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pctsUsdcBlxMaxLock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pctsUsdcBlxNoLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pctsUsdcMaxLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pctsUsdcNoLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinBlxAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinUsdAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsDistribution(
      _rewardsDistribution: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitReward(
      account: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      usdAmount: PromiseOrValue<BigNumberish>,
      blxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
