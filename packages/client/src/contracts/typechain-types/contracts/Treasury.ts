/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TreasuryInterface extends utils.Interface {
  functions: {
    "addTrustedAddress(address)": FunctionFragment;
    "adjCoeff(uint256,uint256,uint256)": FunctionFragment;
    "configure(address,address)": FunctionFragment;
    "distributeProfit()": FunctionFragment;
    "gapAmount(address)": FunctionFragment;
    "getAmericanBalances(address)": FunctionFragment;
    "getCollateralByOptionType(uint256,uint256,uint256)": FunctionFragment;
    "getDigitalBalances(address)": FunctionFragment;
    "getPlatformProfits(address)": FunctionFragment;
    "getTurboBalances(address)": FunctionFragment;
    "get_r1(uint256,uint256,uint256)": FunctionFragment;
    "get_r2(uint256,uint256)": FunctionFragment;
    "isTrustedAddress(address)": FunctionFragment;
    "isTrustedCaller()": FunctionFragment;
    "lockBetCollateral(uint256,uint256,uint256,uint256)": FunctionFragment;
    "lostBlx()": FunctionFragment;
    "lostUsd()": FunctionFragment;
    "notifyPlatformReward(address,uint256)": FunctionFragment;
    "onLooseRewards(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "payBlxTo(address,uint256)": FunctionFragment;
    "payTokensTo(address,uint256)": FunctionFragment;
    "platformOwnIncome(address)": FunctionFragment;
    "registerBalanceChange(address,uint256,uint256,uint8)": FunctionFragment;
    "removeTrustedAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGapAmounts(uint256,uint256)": FunctionFragment;
    "setPlatformBeneficiary(address)": FunctionFragment;
    "takeBlxFrom(address,uint256)": FunctionFragment;
    "takeTokensFrom(address,uint256)": FunctionFragment;
    "totalCollateral(uint256,uint256)": FunctionFragment;
    "totalIncome(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockBetCollateral(uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdrawBlx(address,uint256,uint256)": FunctionFragment;
    "withdrawPlatformOwnIncome(uint8,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTrustedAddress"
      | "adjCoeff"
      | "configure"
      | "distributeProfit"
      | "gapAmount"
      | "getAmericanBalances"
      | "getCollateralByOptionType"
      | "getDigitalBalances"
      | "getPlatformProfits"
      | "getTurboBalances"
      | "get_r1"
      | "get_r2"
      | "isTrustedAddress"
      | "isTrustedCaller"
      | "lockBetCollateral"
      | "lostBlx"
      | "lostUsd"
      | "notifyPlatformReward"
      | "onLooseRewards"
      | "owner"
      | "payBlxTo"
      | "payTokensTo"
      | "platformOwnIncome"
      | "registerBalanceChange"
      | "removeTrustedAddress"
      | "renounceOwnership"
      | "setGapAmounts"
      | "setPlatformBeneficiary"
      | "takeBlxFrom"
      | "takeTokensFrom"
      | "totalCollateral"
      | "totalIncome"
      | "transferOwnership"
      | "unlockBetCollateral"
      | "withdrawBlx"
      | "withdrawPlatformOwnIncome"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adjCoeff",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gapAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmericanBalances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralByOptionType",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDigitalBalances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformProfits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTurboBalances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_r1",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_r2",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockBetCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "lostBlx", values?: undefined): string;
  encodeFunctionData(functionFragment: "lostUsd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyPlatformReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onLooseRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payBlxTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payTokensTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "platformOwnIncome",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBalanceChange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGapAmounts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformBeneficiary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeBlxFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeTokensFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalIncome",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockBetCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBlx",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformOwnIncome",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adjCoeff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gapAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmericanBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralByOptionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDigitalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformProfits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTurboBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_r1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_r2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockBetCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lostBlx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lostUsd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyPlatformReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLooseRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payBlxTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payTokensTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformOwnIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBalanceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGapAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeBlxFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeTokensFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockBetCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBlx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformOwnIncome",
    data: BytesLike
  ): Result;

  events: {
    "BlxBurned(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlxBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BlxBurnedEventObject {
  user: string;
  amount: BigNumber;
}
export type BlxBurnedEvent = TypedEvent<
  [string, BigNumber],
  BlxBurnedEventObject
>;

export type BlxBurnedEventFilter = TypedEventFilter<BlxBurnedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Treasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adjCoeff(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { coef: BigNumber }>;

    configure(
      _staking: PromiseOrValue<string>,
      _formulas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gapAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmericanBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { investments: BigNumber; payouts: BigNumber }
    >;

    getCollateralByOptionType(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDigitalBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { investments: BigNumber; payouts: BigNumber }
    >;

    getPlatformProfits(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        digital: BigNumber;
        american: BigNumber;
        turbo: BigNumber;
      }
    >;

    getTurboBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { investments: BigNumber; payouts: BigNumber }
    >;

    get_r1(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { r1: BigNumber }>;

    get_r2(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { r2: BigNumber }>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedCaller(overrides?: CallOverrides): Promise<[boolean]>;

    lockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lostBlx(overrides?: CallOverrides): Promise<[BigNumber]>;

    lostUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyPlatformReward(
      token: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onLooseRewards(
      usd: PromiseOrValue<BigNumberish>,
      blx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payBlxTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payTokensTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    platformOwnIncome(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerBalanceChange(
      token: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGapAmounts(
      usdGap: PromiseOrValue<BigNumberish>,
      blxGap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeBlxFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeTokensFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCollateral(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalIncome(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBlx(
      user: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawPlatformOwnIncome(
      rewardToken: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adjCoeff(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  configure(
    _staking: PromiseOrValue<string>,
    _formulas: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeProfit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gapAmount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmericanBalances(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { investments: BigNumber; payouts: BigNumber }
  >;

  getCollateralByOptionType(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDigitalBalances(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { investments: BigNumber; payouts: BigNumber }
  >;

  getPlatformProfits(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      digital: BigNumber;
      american: BigNumber;
      turbo: BigNumber;
    }
  >;

  getTurboBalances(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { investments: BigNumber; payouts: BigNumber }
  >;

  get_r1(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_r2(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

  lockBetCollateral(
    amount: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    product: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lostBlx(overrides?: CallOverrides): Promise<BigNumber>;

  lostUsd(overrides?: CallOverrides): Promise<BigNumber>;

  notifyPlatformReward(
    token: PromiseOrValue<string>,
    reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onLooseRewards(
    usd: PromiseOrValue<BigNumberish>,
    blx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payBlxTo(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payTokensTo(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  platformOwnIncome(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerBalanceChange(
    token: PromiseOrValue<string>,
    investment: PromiseOrValue<BigNumberish>,
    payout: PromiseOrValue<BigNumberish>,
    product: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGapAmounts(
    usdGap: PromiseOrValue<BigNumberish>,
    blxGap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformBeneficiary(
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeBlxFrom(
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeTokensFrom(
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCollateral(
    product: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalIncome(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockBetCollateral(
    amount: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    product: PromiseOrValue<BigNumberish>,
    optionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBlx(
    user: PromiseOrValue<string>,
    withdrawAmount: PromiseOrValue<BigNumberish>,
    burnAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawPlatformOwnIncome(
    rewardToken: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    adjCoeff(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configure(
      _staking: PromiseOrValue<string>,
      _formulas: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeProfit(overrides?: CallOverrides): Promise<void>;

    gapAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmericanBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { investments: BigNumber; payouts: BigNumber }
    >;

    getCollateralByOptionType(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDigitalBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { investments: BigNumber; payouts: BigNumber }
    >;

    getPlatformProfits(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        digital: BigNumber;
        american: BigNumber;
        turbo: BigNumber;
      }
    >;

    getTurboBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { investments: BigNumber; payouts: BigNumber }
    >;

    get_r1(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r2(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

    lockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lostBlx(overrides?: CallOverrides): Promise<BigNumber>;

    lostUsd(overrides?: CallOverrides): Promise<BigNumber>;

    notifyPlatformReward(
      token: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onLooseRewards(
      usd: PromiseOrValue<BigNumberish>,
      blx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payBlxTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payTokensTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    platformOwnIncome(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBalanceChange(
      token: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGapAmounts(
      usdGap: PromiseOrValue<BigNumberish>,
      blxGap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeBlxFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeTokensFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCollateral(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalIncome(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBlx(
      user: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPlatformOwnIncome(
      rewardToken: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlxBurned(address,uint256)"(
      user?: null,
      amount?: null
    ): BlxBurnedEventFilter;
    BlxBurned(user?: null, amount?: null): BlxBurnedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adjCoeff(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configure(
      _staking: PromiseOrValue<string>,
      _formulas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gapAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmericanBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralByOptionType(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDigitalBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformProfits(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTurboBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r1(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_r2(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedCaller(overrides?: CallOverrides): Promise<BigNumber>;

    lockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lostBlx(overrides?: CallOverrides): Promise<BigNumber>;

    lostUsd(overrides?: CallOverrides): Promise<BigNumber>;

    notifyPlatformReward(
      token: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onLooseRewards(
      usd: PromiseOrValue<BigNumberish>,
      blx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payBlxTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payTokensTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    platformOwnIncome(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBalanceChange(
      token: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGapAmounts(
      usdGap: PromiseOrValue<BigNumberish>,
      blxGap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeBlxFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeTokensFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCollateral(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalIncome(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBlx(
      user: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawPlatformOwnIncome(
      rewardToken: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adjCoeff(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configure(
      _staking: PromiseOrValue<string>,
      _formulas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeProfit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gapAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmericanBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralByOptionType(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDigitalBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformProfits(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTurboBalances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_r1(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_r2(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lostBlx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lostUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyPlatformReward(
      token: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onLooseRewards(
      usd: PromiseOrValue<BigNumberish>,
      blx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payBlxTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payTokensTo(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    platformOwnIncome(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerBalanceChange(
      token: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGapAmounts(
      usdGap: PromiseOrValue<BigNumberish>,
      blxGap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeBlxFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeTokensFrom(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCollateral(
      product: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalIncome(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockBetCollateral(
      amount: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      product: PromiseOrValue<BigNumberish>,
      optionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBlx(
      user: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPlatformOwnIncome(
      rewardToken: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
