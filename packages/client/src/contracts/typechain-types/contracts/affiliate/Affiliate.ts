/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AffiliateInterface extends utils.Interface {
  functions: {
    "BLX()": FunctionFragment;
    "DECIMALS()": FunctionFragment;
    "MONTH()": FunctionFragment;
    "PCT_BASE()": FunctionFragment;
    "USDC()": FunctionFragment;
    "addReferal(address,address)": FunctionFragment;
    "addTier(uint256,uint256,uint256,bool)": FunctionFragment;
    "addTrustedAddress(address)": FunctionFragment;
    "addUser(address)": FunctionFragment;
    "checkUserExists(address)": FunctionFragment;
    "claimReward(address)": FunctionFragment;
    "classic(uint256)": FunctionFragment;
    "digital(uint256)": FunctionFragment;
    "getParent(address)": FunctionFragment;
    "getUserStats(address,address)": FunctionFragment;
    "isTrustedAddress(address)": FunctionFragment;
    "isTrustedCaller()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeTrustedAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "showUserRewards(address,address)": FunctionFragment;
    "stats(address,address)": FunctionFragment;
    "traders(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateStats(address,uint256,address,bool)": FunctionFragment;
    "updateTier(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "updateVolume(address,uint256,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BLX"
      | "DECIMALS"
      | "MONTH"
      | "PCT_BASE"
      | "USDC"
      | "addReferal"
      | "addTier"
      | "addTrustedAddress"
      | "addUser"
      | "checkUserExists"
      | "claimReward"
      | "classic"
      | "digital"
      | "getParent"
      | "getUserStats"
      | "isTrustedAddress"
      | "isTrustedCaller"
      | "owner"
      | "removeTrustedAddress"
      | "renounceOwnership"
      | "rewards"
      | "showUserRewards"
      | "stats"
      | "traders"
      | "transferOwnership"
      | "updateStats"
      | "updateTier"
      | "updateVolume"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BLX", values?: undefined): string;
  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(functionFragment: "MONTH", values?: undefined): string;
  encodeFunctionData(functionFragment: "PCT_BASE", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addReferal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTier",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUserExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "classic",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "digital",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedCaller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "showUserRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stats",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "traders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStats",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTier",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVolume",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "BLX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MONTH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PCT_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addReferal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkUserExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "classic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "digital", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getParent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "traders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVolume",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Affiliate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AffiliateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLX(overrides?: CallOverrides): Promise<[string]>;

    DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MONTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCT_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    addReferal(
      user: PromiseOrValue<string>,
      referer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkUserExists(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimReward(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    classic(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        volume: BigNumber;
        refShare: BigNumber;
        selfShare: BigNumber;
      }
    >;

    digital(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        volume: BigNumber;
        refShare: BigNumber;
        selfShare: BigNumber;
      }
    >;

    getParent(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserStats(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedCaller(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    showUserRewards(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stats(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        investmentDigital: BigNumber;
        refInvestmentDigital: BigNumber;
        investmentClassic: BigNumber;
        refInvestmentClassic: BigNumber;
        payoff: BigNumber;
        fees: BigNumber;
        refPayoff: BigNumber;
        refFees: BigNumber;
      }
    >;

    traders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { timeSync: BigNumber; referer: string }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStats(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVolume(
      user: PromiseOrValue<string>,
      volume: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BLX(overrides?: CallOverrides): Promise<string>;

  DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  MONTH(overrides?: CallOverrides): Promise<BigNumber>;

  PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  USDC(overrides?: CallOverrides): Promise<string>;

  addReferal(
    user: PromiseOrValue<string>,
    referer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTier(
    volume: PromiseOrValue<BigNumberish>,
    refShare: PromiseOrValue<BigNumberish>,
    selfShare: PromiseOrValue<BigNumberish>,
    isDigital: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUser(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkUserExists(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimReward(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  classic(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      volume: BigNumber;
      refShare: BigNumber;
      selfShare: BigNumber;
    }
  >;

  digital(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      volume: BigNumber;
      refShare: BigNumber;
      selfShare: BigNumber;
    }
  >;

  getParent(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserStats(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  isTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewards(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  showUserRewards(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stats(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      investmentDigital: BigNumber;
      refInvestmentDigital: BigNumber;
      investmentClassic: BigNumber;
      refInvestmentClassic: BigNumber;
      payoff: BigNumber;
      fees: BigNumber;
      refPayoff: BigNumber;
      refFees: BigNumber;
    }
  >;

  traders(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { timeSync: BigNumber; referer: string }>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStats(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    isDigital: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTier(
    volume: PromiseOrValue<BigNumberish>,
    refShare: PromiseOrValue<BigNumberish>,
    selfShare: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    isDigital: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVolume(
    user: PromiseOrValue<string>,
    volume: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    isDigital: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BLX(overrides?: CallOverrides): Promise<string>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<string>;

    addReferal(
      user: PromiseOrValue<string>,
      referer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkUserExists(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimReward(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    classic(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        volume: BigNumber;
        refShare: BigNumber;
        selfShare: BigNumber;
      }
    >;

    digital(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        volume: BigNumber;
        refShare: BigNumber;
        selfShare: BigNumber;
      }
    >;

    getParent(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserStats(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showUserRewards(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stats(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        investmentDigital: BigNumber;
        refInvestmentDigital: BigNumber;
        investmentClassic: BigNumber;
        refInvestmentClassic: BigNumber;
        payoff: BigNumber;
        fees: BigNumber;
        refPayoff: BigNumber;
        refFees: BigNumber;
      }
    >;

    traders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { timeSync: BigNumber; referer: string }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStats(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVolume(
      user: PromiseOrValue<string>,
      volume: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BLX(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    addReferal(
      user: PromiseOrValue<string>,
      referer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkUserExists(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    classic(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    digital(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParent(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStats(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedCaller(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    showUserRewards(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stats(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStats(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVolume(
      user: PromiseOrValue<string>,
      volume: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BLX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MONTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCT_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReferal(
      user: PromiseOrValue<string>,
      referer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkUserExists(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    classic(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    digital(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParent(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStats(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    showUserRewards(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stats(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStats(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTier(
      volume: PromiseOrValue<BigNumberish>,
      refShare: PromiseOrValue<BigNumberish>,
      selfShare: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVolume(
      user: PromiseOrValue<string>,
      volume: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      isDigital: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
