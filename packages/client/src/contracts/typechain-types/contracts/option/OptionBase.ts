/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OptionBaseInterface extends utils.Interface {
  functions: {
    "DECIMALS()": FunctionFragment;
    "MAX_DURATION()": FunctionFragment;
    "MIN_DURATION()": FunctionFragment;
    "calculateBinaryPayoff(uint256,int128,int128)": FunctionFragment;
    "ensureCorrectDuration(uint256)": FunctionFragment;
    "ensureCorrectTimes(uint256,uint256)": FunctionFragment;
    "xNotional()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DECIMALS"
      | "MAX_DURATION"
      | "MIN_DURATION"
      | "calculateBinaryPayoff"
      | "ensureCorrectDuration"
      | "ensureCorrectTimes"
      | "xNotional"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBinaryPayoff",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureCorrectDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureCorrectTimes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "xNotional", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBinaryPayoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensureCorrectDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensureCorrectTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xNotional", data: BytesLike): Result;

  events: {};
}

export interface OptionBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptionBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateBinaryPayoff(
      investment: PromiseOrValue<BigNumberish>,
      optionPrice: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ensureCorrectDuration(
      _timeDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    ensureCorrectTimes(
      _timeOpen: PromiseOrValue<BigNumberish>,
      _timeClose: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    xNotional(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  calculateBinaryPayoff(
    investment: PromiseOrValue<BigNumberish>,
    optionPrice: PromiseOrValue<BigNumberish>,
    factor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ensureCorrectDuration(
    _timeDiff: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  ensureCorrectTimes(
    _timeOpen: PromiseOrValue<BigNumberish>,
    _timeClose: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  xNotional(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    calculateBinaryPayoff(
      investment: PromiseOrValue<BigNumberish>,
      optionPrice: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureCorrectDuration(
      _timeDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ensureCorrectTimes(
      _timeOpen: PromiseOrValue<BigNumberish>,
      _timeClose: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    xNotional(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    calculateBinaryPayoff(
      investment: PromiseOrValue<BigNumberish>,
      optionPrice: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureCorrectDuration(
      _timeDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureCorrectTimes(
      _timeOpen: PromiseOrValue<BigNumberish>,
      _timeClose: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xNotional(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateBinaryPayoff(
      investment: PromiseOrValue<BigNumberish>,
      optionPrice: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensureCorrectDuration(
      _timeDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensureCorrectTimes(
      _timeOpen: PromiseOrValue<BigNumberish>,
      _timeClose: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xNotional(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
