/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface OptionNoTouchInterface extends utils.Interface {
  functions: {
    "DECIMALS()": FunctionFragment;
    "MAX_DURATION()": FunctionFragment;
    "MIN_DURATION()": FunctionFragment;
    "_bet_add(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "_bet_close(address,uint256,uint256,uint256)": FunctionFragment;
    "addTrustedAddress(address)": FunctionFragment;
    "bet()": FunctionFragment;
    "bet_add(uint256,uint256,uint256,uint256)": FunctionFragment;
    "bet_close(uint256)": FunctionFragment;
    "bets(uint256)": FunctionFragment;
    "calculateBinaryPayoff(uint256,int128,int128)": FunctionFragment;
    "calculateOptionPrice(uint256,uint256,uint256,uint256)": FunctionFragment;
    "commission()": FunctionFragment;
    "configureNode(address,address,address)": FunctionFragment;
    "decimal()": FunctionFragment;
    "ensureCorrectDuration(uint256)": FunctionFragment;
    "ensureCorrectTimes(uint256,uint256)": FunctionFragment;
    "isDigital()": FunctionFragment;
    "isTrustedAddress(address)": FunctionFragment;
    "isTrustedCaller()": FunctionFragment;
    "jobId(string)": FunctionFragment;
    "lastBetId()": FunctionFragment;
    "linkToken()": FunctionFragment;
    "mcl()": FunctionFragment;
    "nextId()": FunctionFragment;
    "node()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "profitFactor()": FunctionFragment;
    "removeTrustedAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCommission(uint256)": FunctionFragment;
    "setJobId(string,string)": FunctionFragment;
    "setMcl(uint256)": FunctionFragment;
    "setProfitFactor(int128)": FunctionFragment;
    "setVolatilityFactor(int128)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdToken()": FunctionFragment;
    "volatilityFactor()": FunctionFragment;
    "xNotional()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DECIMALS"
      | "MAX_DURATION"
      | "MIN_DURATION"
      | "_bet_add"
      | "_bet_close"
      | "addTrustedAddress"
      | "bet"
      | "bet_add"
      | "bet_close"
      | "bets"
      | "calculateBinaryPayoff"
      | "calculateOptionPrice"
      | "commission"
      | "configureNode"
      | "decimal"
      | "ensureCorrectDuration"
      | "ensureCorrectTimes"
      | "isDigital"
      | "isTrustedAddress"
      | "isTrustedCaller"
      | "jobId"
      | "lastBetId"
      | "linkToken"
      | "mcl"
      | "nextId"
      | "node"
      | "oracle"
      | "owner"
      | "profitFactor"
      | "removeTrustedAddress"
      | "renounceOwnership"
      | "setCommission"
      | "setJobId"
      | "setMcl"
      | "setProfitFactor"
      | "setVolatilityFactor"
      | "transferOwnership"
      | "usdToken"
      | "volatilityFactor"
      | "xNotional"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_bet_add",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_bet_close",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "bet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bet_add",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bet_close",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBinaryPayoff",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOptionPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureNode",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ensureCorrectDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureCorrectTimes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "isDigital", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jobId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "lastBetId", values?: undefined): string;
  encodeFunctionData(functionFragment: "linkToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "mcl", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(functionFragment: "node", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profitFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCommission",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setJobId",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMcl",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitFactor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVolatilityFactor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "volatilityFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "xNotional", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_bet_add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_bet_close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet_add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet_close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateBinaryPayoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commission", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ensureCorrectDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensureCorrectTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDigital", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastBetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "linkToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mcl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "node", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "profitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setJobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMcl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProfitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVolatilityFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "volatilityFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xNotional", data: BytesLike): Result;

  events: {
    "Bet_close(uint256,bool)": EventFragment;
    "Bet_new(uint256)": EventFragment;
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bet_close"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bet_new"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface Bet_closeEventObject {
  betId: BigNumber;
  win: boolean;
}
export type Bet_closeEvent = TypedEvent<
  [BigNumber, boolean],
  Bet_closeEventObject
>;

export type Bet_closeEventFilter = TypedEventFilter<Bet_closeEvent>;

export interface Bet_newEventObject {
  betId: BigNumber;
}
export type Bet_newEvent = TypedEvent<[BigNumber], Bet_newEventObject>;

export type Bet_newEventFilter = TypedEventFilter<Bet_newEvent>;

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface OptionNoTouch extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptionNoTouchInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _bet_add(
      trader: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      timeClose: PromiseOrValue<BigNumberish>,
      priceOpen: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _bet_close(
      trader: PromiseOrValue<string>,
      betId: PromiseOrValue<BigNumberish>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bet(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        trader: string;
        payoff: BigNumber;
        derivativeId: BigNumber;
        investment: BigNumber;
        K: BigNumber;
        optionType: boolean;
        timeOpen: BigNumber;
        timeClose: BigNumber;
        priceOpen: BigNumber;
        close: boolean;
      }
    >;

    bet_add(
      investment: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      timeClose: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bet_close(
      betId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        trader: string;
        payoff: BigNumber;
        derivativeId: BigNumber;
        investment: BigNumber;
        K: BigNumber;
        optionType: boolean;
        timeOpen: BigNumber;
        timeClose: BigNumber;
        priceOpen: BigNumber;
        close: boolean;
      }
    >;

    calculateBinaryPayoff(
      investment: PromiseOrValue<BigNumberish>,
      optionPrice: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateOptionPrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      priceOpen: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { optionPrice: BigNumber; hv: BigNumber }
    >;

    commission(overrides?: CallOverrides): Promise<[BigNumber]>;

    configureNode(
      _node: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimal(overrides?: CallOverrides): Promise<[BigNumber]>;

    ensureCorrectDuration(
      _timeDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    ensureCorrectTimes(
      _timeOpen: PromiseOrValue<BigNumberish>,
      _timeClose: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    isDigital(overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedCaller(overrides?: CallOverrides): Promise<[boolean]>;

    jobId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lastBetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    linkToken(overrides?: CallOverrides): Promise<[string]>;

    mcl(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextId(overrides?: CallOverrides): Promise<[BigNumber]>;

    node(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    profitFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommission(
      _commission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setJobId(
      jobName: PromiseOrValue<string>,
      _jobId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMcl(
      _mcl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProfitFactor(
      _profitFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVolatilityFactor(
      _volFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdToken(overrides?: CallOverrides): Promise<[string]>;

    volatilityFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    xNotional(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  _bet_add(
    trader: PromiseOrValue<string>,
    investment: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    timeClose: PromiseOrValue<BigNumberish>,
    priceOpen: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _bet_close(
    trader: PromiseOrValue<string>,
    betId: PromiseOrValue<BigNumberish>,
    minPrice: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bet(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      trader: string;
      payoff: BigNumber;
      derivativeId: BigNumber;
      investment: BigNumber;
      K: BigNumber;
      optionType: boolean;
      timeOpen: BigNumber;
      timeClose: BigNumber;
      priceOpen: BigNumber;
      close: boolean;
    }
  >;

  bet_add(
    investment: PromiseOrValue<BigNumberish>,
    derivativeId: PromiseOrValue<BigNumberish>,
    timeClose: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bet_close(
    betId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      trader: string;
      payoff: BigNumber;
      derivativeId: BigNumber;
      investment: BigNumber;
      K: BigNumber;
      optionType: boolean;
      timeOpen: BigNumber;
      timeClose: BigNumber;
      priceOpen: BigNumber;
      close: boolean;
    }
  >;

  calculateBinaryPayoff(
    investment: PromiseOrValue<BigNumberish>,
    optionPrice: PromiseOrValue<BigNumberish>,
    factor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateOptionPrice(
    derivativeId: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    priceOpen: PromiseOrValue<BigNumberish>,
    K: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { optionPrice: BigNumber; hv: BigNumber }
  >;

  commission(overrides?: CallOverrides): Promise<BigNumber>;

  configureNode(
    _node: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimal(overrides?: CallOverrides): Promise<BigNumber>;

  ensureCorrectDuration(
    _timeDiff: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  ensureCorrectTimes(
    _timeOpen: PromiseOrValue<BigNumberish>,
    _timeClose: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  isDigital(overrides?: CallOverrides): Promise<boolean>;

  isTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

  jobId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  lastBetId(overrides?: CallOverrides): Promise<BigNumber>;

  linkToken(overrides?: CallOverrides): Promise<string>;

  mcl(overrides?: CallOverrides): Promise<BigNumber>;

  nextId(overrides?: CallOverrides): Promise<BigNumber>;

  node(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

  removeTrustedAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommission(
    _commission: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setJobId(
    jobName: PromiseOrValue<string>,
    _jobId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMcl(
    _mcl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProfitFactor(
    _profitFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVolatilityFactor(
    _volFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdToken(overrides?: CallOverrides): Promise<string>;

  volatilityFactor(overrides?: CallOverrides): Promise<BigNumber>;

  xNotional(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    _bet_add(
      trader: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      timeClose: PromiseOrValue<BigNumberish>,
      priceOpen: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _bet_close(
      trader: PromiseOrValue<string>,
      betId: PromiseOrValue<BigNumberish>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bet(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        trader: string;
        payoff: BigNumber;
        derivativeId: BigNumber;
        investment: BigNumber;
        K: BigNumber;
        optionType: boolean;
        timeOpen: BigNumber;
        timeClose: BigNumber;
        priceOpen: BigNumber;
        close: boolean;
      }
    >;

    bet_add(
      investment: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      timeClose: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    bet_close(
      betId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        trader: string;
        payoff: BigNumber;
        derivativeId: BigNumber;
        investment: BigNumber;
        K: BigNumber;
        optionType: boolean;
        timeOpen: BigNumber;
        timeClose: BigNumber;
        priceOpen: BigNumber;
        close: boolean;
      }
    >;

    calculateBinaryPayoff(
      investment: PromiseOrValue<BigNumberish>,
      optionPrice: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateOptionPrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      priceOpen: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { optionPrice: BigNumber; hv: BigNumber }
    >;

    commission(overrides?: CallOverrides): Promise<BigNumber>;

    configureNode(
      _node: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decimal(overrides?: CallOverrides): Promise<BigNumber>;

    ensureCorrectDuration(
      _timeDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ensureCorrectTimes(
      _timeOpen: PromiseOrValue<BigNumberish>,
      _timeClose: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isDigital(overrides?: CallOverrides): Promise<boolean>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedCaller(overrides?: CallOverrides): Promise<boolean>;

    jobId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    lastBetId(overrides?: CallOverrides): Promise<BigNumber>;

    linkToken(overrides?: CallOverrides): Promise<string>;

    mcl(overrides?: CallOverrides): Promise<BigNumber>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    node(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCommission(
      _commission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setJobId(
      jobName: PromiseOrValue<string>,
      _jobId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMcl(
      _mcl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfitFactor(
      _profitFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVolatilityFactor(
      _volFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdToken(overrides?: CallOverrides): Promise<string>;

    volatilityFactor(overrides?: CallOverrides): Promise<BigNumber>;

    xNotional(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Bet_close(uint256,bool)"(betId?: null, win?: null): Bet_closeEventFilter;
    Bet_close(betId?: null, win?: null): Bet_closeEventFilter;

    "Bet_new(uint256)"(betId?: null): Bet_newEventFilter;
    Bet_new(betId?: null): Bet_newEventFilter;

    "ChainlinkCancelled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    _bet_add(
      trader: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      timeClose: PromiseOrValue<BigNumberish>,
      priceOpen: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _bet_close(
      trader: PromiseOrValue<string>,
      betId: PromiseOrValue<BigNumberish>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bet(overrides?: CallOverrides): Promise<BigNumber>;

    bet_add(
      investment: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      timeClose: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bet_close(
      betId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateBinaryPayoff(
      investment: PromiseOrValue<BigNumberish>,
      optionPrice: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateOptionPrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      priceOpen: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commission(overrides?: CallOverrides): Promise<BigNumber>;

    configureNode(
      _node: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimal(overrides?: CallOverrides): Promise<BigNumber>;

    ensureCorrectDuration(
      _timeDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureCorrectTimes(
      _timeOpen: PromiseOrValue<BigNumberish>,
      _timeClose: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDigital(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedCaller(overrides?: CallOverrides): Promise<BigNumber>;

    jobId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastBetId(overrides?: CallOverrides): Promise<BigNumber>;

    linkToken(overrides?: CallOverrides): Promise<BigNumber>;

    mcl(overrides?: CallOverrides): Promise<BigNumber>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    node(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommission(
      _commission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setJobId(
      jobName: PromiseOrValue<string>,
      _jobId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMcl(
      _mcl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProfitFactor(
      _profitFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVolatilityFactor(
      _volFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdToken(overrides?: CallOverrides): Promise<BigNumber>;

    volatilityFactor(overrides?: CallOverrides): Promise<BigNumber>;

    xNotional(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _bet_add(
      trader: PromiseOrValue<string>,
      investment: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      timeClose: PromiseOrValue<BigNumberish>,
      priceOpen: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _bet_close(
      trader: PromiseOrValue<string>,
      betId: PromiseOrValue<BigNumberish>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bet_add(
      investment: PromiseOrValue<BigNumberish>,
      derivativeId: PromiseOrValue<BigNumberish>,
      timeClose: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bet_close(
      betId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateBinaryPayoff(
      investment: PromiseOrValue<BigNumberish>,
      optionPrice: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateOptionPrice(
      derivativeId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      priceOpen: PromiseOrValue<BigNumberish>,
      K: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configureNode(
      _node: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _link: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ensureCorrectDuration(
      _timeDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensureCorrectTimes(
      _timeOpen: PromiseOrValue<BigNumberish>,
      _timeClose: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDigital(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastBetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mcl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    node(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTrustedAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommission(
      _commission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setJobId(
      jobName: PromiseOrValue<string>,
      _jobId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMcl(
      _mcl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProfitFactor(
      _profitFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVolatilityFactor(
      _volFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    volatilityFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xNotional(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
