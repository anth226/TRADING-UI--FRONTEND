/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestERC20,
  TestERC20Interface,
} from "../../../contracts/test/TestERC20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mintFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604080518082018252600981526805465737445524332360bc1b602080830191825283518085019094526002845261151560f21b9084015281519192916200005d916003916200007c565b508051620000739060049060208401906200007c565b50505062000169565b8280546200008a9062000122565b90600052602060002090601f016020900481019282620000ae5760008555620000f9565b82601f10620000c957805160ff1916838001178555620000f9565b82800160010185558215620000f9579182015b82811115620000f9578251825591602001919060010190620000dc565b50620001079291506200010b565b5090565b5b808211156200010757600081556001016200010c565b6002810460018216806200013757607f821691505b602082108114156200014d576200014d62000153565b50919050565b634e487b7160e01b600052602260045260246000fd5b610c2580620001796000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806370a082311161008c578063a457c2d711610066578063a457c2d7146101ae578063a9059cbb146101c1578063da1919b3146101d4578063dd62ed3e146101e757600080fd5b806370a082311461016857806395d89b4114610191578063a0712d681461019957600080fd5b806323b872dd116100bd57806323b872dd14610133578063313ce56714610146578063395093511461015557600080fd5b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610122575b600080fd5b6100ec610220565b6040516100f99190610a7a565b60405180910390f35b61011561011036600461075e565b6102b2565b6040516100f99190610a6c565b6002545b6040516100f99190610b0b565b610115610141366004610713565b6102cc565b60126040516100f99190610b19565b61011561016336600461075e565b6102f0565b6101266101763660046106b7565b6001600160a01b031660009081526020819052604090205490565b6100ec61032f565b6101ac6101a736600461078c565b61033e565b005b6101156101bc36600461075e565b61034b565b6101156101cf36600461075e565b6103a8565b6101ac6101e236600461075e565b6103b6565b6101266101f53660046106db565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461022f90610b7c565b80601f016020809104026020016040519081016040528092919081815260200182805461025b90610b7c565b80156102a85780601f1061027d576101008083540402835291602001916102a8565b820191906000526020600020905b81548152906001019060200180831161028b57829003601f168201915b5050505050905090565b6000336102c08185856103c4565b60019150505b92915050565b6000336102da858285610478565b6102e58585856104da565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906102c0908290869061032a908790610b27565b6103c4565b60606004805461022f90610b7c565b61034833826105ed565b50565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561039b5760405162461bcd60e51b815260040161039290610aeb565b60405180910390fd5b6102e582868684036103c4565b6000336102c08185856104da565b6103c082826105ed565b5050565b6001600160a01b0383166103ea5760405162461bcd60e51b815260040161039290610adb565b6001600160a01b0382166104105760405162461bcd60e51b815260040161039290610a9b565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061046b908590610b0b565b60405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146104d457818110156104c75760405162461bcd60e51b815260040161039290610aab565b6104d484848484036103c4565b50505050565b6001600160a01b0383166105005760405162461bcd60e51b815260040161039290610acb565b6001600160a01b0382166105265760405162461bcd60e51b815260040161039290610a8b565b6001600160a01b0383166000908152602081905260409020548181101561055f5760405162461bcd60e51b815260040161039290610abb565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610596908490610b27565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105e09190610b0b565b60405180910390a36104d4565b6001600160a01b0382166106135760405162461bcd60e51b815260040161039290610afb565b80600260008282546106259190610b27565b90915550506001600160a01b03821660009081526020819052604081208054839290610652908490610b27565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610695908590610b0b565b60405180910390a35050565b80356102c681610bd5565b80356102c681610be9565b6000602082840312156106c8578081fd5b6106d4838284016106a1565b9392505050565b600080604083850312156106ed578081fd5b6106f9848285016106a1565b91506020610709858286016106a1565b9150509250929050565b600080600060608486031215610727578081fd5b610733858286016106a1565b92506020610743868287016106a1565b9250506040610754868287016106ac565b9150509250925092565b60008060408385031215610770578182fd5b61077c848385016106a1565b91506020610709858286016106ac565b60006020828403121561079d578081fd5b6106d4838284016106ac565b8015155b82525050565b60006107bd825190565b8084526020840193506107d4818560208601610b50565b601f01601f19169290920192915050565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f6573730000000000000000000000000000000000000000000000000000000000602082015290505b60400190565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f737300000000000000000000000000000000000000000000000000000000000060208201529050610839565b601d8152602081017f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000815290505b60200190565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e6365000000000000000000000000000000000000000000000000000060208201529050610839565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f647265737300000000000000000000000000000000000000000000000000000060208201529050610839565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f726573730000000000000000000000000000000000000000000000000000000060208201529050610839565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f00000000000000000000000000000000000000000000000000000060208201529050610839565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f206164647265737300815290506108c5565b806107ad565b60ff81166107ad565b602081016102c682846107a9565b602080825281016106d481846107b3565b602080825281016102c6816107e5565b602080825281016102c68161083f565b602080825281016102c681610897565b602080825281016102c6816108cb565b602080825281016102c681610923565b602080825281016102c68161097b565b602080825281016102c6816109d3565b602080825281016102c681610a2b565b602081016102c68284610a5d565b602081016102c68284610a63565b60008219821115610b3a57610b3a610ba9565b500190565b60006001600160a01b0382166102c6565b60005b83811015610b6b578181015183820152602001610b53565b838111156104d45750506000910152565b600281046001821680610b9057607f821691505b60208210811415610ba357610ba3610bbf565b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b610bde81610b3f565b811461034857600080fd5b80610bde56fea264697066735822122087cd8b379c2af5d50e45e2d4994903bdbac221e97c9539c924d756d955cb67d364736f6c63430008040033";

type TestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20__factory extends ContractFactory {
  constructor(...args: TestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC20> {
    return super.deploy(overrides || {}) as Promise<TestERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  override connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
