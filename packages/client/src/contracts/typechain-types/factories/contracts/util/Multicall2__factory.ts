/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall2,
  Multicall2Interface,
} from "../../../contracts/util/Multicall2";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c05806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610184578063c3077fa9146101a4578063ee82ac5e146101b757600080fd5b806372425d9d1461016a57806386d516e814610170578063a8b0574e1461017657600080fd5b8063399542e9116100b2578063399542e91461011a57806342cbb15c1461013c5780634d2301cc1461014257600080fd5b80630f28c97d146100d9578063252dba42146100f157806327e86d6e14610112575b600080fd5b425b6040516100e89190610964565b60405180910390f35b6101046100ff366004610722565b6101c9565b6040516100e8929190610a0d565b6100db61036a565b61012d610128366004610757565b61037d565b6040516100e893929190610a2d565b436100db565b6100db6101503660046106fe565b73ffffffffffffffffffffffffffffffffffffffff163190565b446100db565b456100db565b416040516100e89190610945565b610197610192366004610757565b610395565b6040516100e89190610953565b61012d6101b2366004610722565b61055a565b6100db6101c53660046107a6565b4090565b8051439060609067ffffffffffffffff8111156101f657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561022957816020015b60608152602001906001900390816102145790505b50905060005b83518110156103645760008085838151811061025b57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1686848151811061029d57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516102b6919061093b565b6000604051808303816000865af19150503d80600081146102f3576040519150601f19603f3d011682016040523d82523d6000602084013e6102f8565b606091505b5091509150816103235760405162461bcd60e51b815260040161031a906109d3565b60405180910390fd5b8084848151811061034457634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061035c90610b63565b91505061022f565b50915091565b6000610377600143610ac5565b40905090565b438040606061038c8585610395565b90509250925092565b6060815167ffffffffffffffff8111156103bf57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561040557816020015b6040805180820190915260008152606060208201528152602001906001900390816103dd5790505b50905060005b82518110156105535760008084838151811061043757634e487b7160e01b600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1685848151811061047957634e487b7160e01b600052603260045260246000fd5b602002602001015160200151604051610492919061093b565b6000604051808303816000865af19150503d80600081146104cf576040519150601f19603f3d011682016040523d82523d6000602084013e6104d4565b606091505b509150915085156104fc57816104fc5760405162461bcd60e51b815260040161031a90610972565b604051806040016040528083151581526020018281525084848151811061053357634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061054b90610b63565b91505061040b565b5092915050565b600080606061056a60018561037d565b9196909550909350915050565b600061058a61058584610a76565b610a5a565b905080838252602082019050828560208602850111156105a957600080fd5b60005b858110156105ed57813567ffffffffffffffff8111156105cb57600080fd5b85016105d78882610694565b84525060209283019291909101906001016105ac565b5050509392505050565b600061060561058584610a9a565b90508281526020810184848401111561061d57600080fd5b610628848285610afa565b509392505050565b803561063b81610baa565b92915050565b600082601f830112610651578081fd5b8135610661848260208601610577565b949350505050565b803561063b81610bc1565b600082601f830112610684578081fd5b81356106618482602086016105f7565b6000604082840312156106a5578081fd5b6106af6040610a5a565b905060006106bd8484610630565b81830152602083013567ffffffffffffffff8111156106da578182fd5b6106e685828601610674565b6020840152505092915050565b803561063b81610bc9565b60006020828403121561070f578081fd5b61071b83828401610630565b9392505050565b600060208284031215610733578081fd5b8082013567ffffffffffffffff81111561074b578182fd5b61066184828501610641565b60008060408385031215610769578081fd5b61077584828501610669565b9150602083013567ffffffffffffffff811115610790578182fd5b61079c85828601610641565b9150509250929050565b6000602082840312156107b7578081fd5b61071b838284016106f3565b600061071b83836108b2565b600061071b8383610906565b6107e481610adc565b82525050565b60006107f4825190565b8084526020840193508360208202850161080e8560200190565b845b84811015610841578383038852815161082984826107c3565b93505060208201602098909801979150600101610810565b50909695505050505050565b6000610857825190565b808452602084019350836020820285016108718560200190565b845b84811015610841578383038852815161088c84826107cf565b93505060208201602098909801979150600101610873565b8015156107e4565b806107e4565b60006108bc825190565b8084526020840193506108d3818560208601610b06565b601f01601f19169290920192915050565b60006108ee825190565b6108fc818560208601610b06565b9290920192915050565b8051600090604084019061091a85826108a4565b506020830151848203602086015261093282826108b2565b95945050505050565b61063b81836108e4565b6020810161063b82846107db565b6020808252810161071b818461084d565b6020810161063b82846108ac565b6020808252810161063b81602181527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560208201527f6400000000000000000000000000000000000000000000000000000000000000604082015260600190565b60208082528181019081527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460408301526060820161063b565b60408101610a1b82856108ac565b818103602083015261066181846107ea565b60608101610a3b82866108ac565b610a4860208301856108ac565b8181036040830152610932818461084d565b6000610a6560405190565b9050610a718282610b36565b919050565b600067ffffffffffffffff821115610a9057610a90610b94565b5060209081020190565b600067ffffffffffffffff821115610ab457610ab4610b94565b601f19601f83011660200192915050565b600082821015610ad757610ad7610b7e565b500390565b600073ffffffffffffffffffffffffffffffffffffffff821661063b565b82818337506000910152565b60005b83811015610b21578181015183820152602001610b09565b83811115610b30576000848401525b50505050565b601f19601f830116810181811067ffffffffffffffff82111715610b5c57610b5c610b94565b6040525050565b6000600019821415610b7757610b77610b7e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610bb381610adc565b8114610bbe57600080fd5b50565b801515610bb3565b80610bb356fea2646970667358221220ef6c3e6bf49a8a67821496b007f6cf2d610c3e3e5fd5a489f9f42ecc79c3700364736f6c63430008040033";

type Multicall2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall2__factory extends ContractFactory {
  constructor(...args: Multicall2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall2> {
    return super.deploy(overrides || {}) as Promise<Multicall2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall2 {
    return super.attach(address) as Multicall2;
  }
  override connect(signer: Signer): Multicall2__factory {
    return super.connect(signer) as Multicall2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall2Interface {
    return new utils.Interface(_abi) as Multicall2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall2 {
    return new Contract(address, _abi, signerOrProvider) as Multicall2;
  }
}
