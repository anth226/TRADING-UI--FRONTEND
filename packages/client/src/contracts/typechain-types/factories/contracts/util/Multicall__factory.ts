/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall,
  MulticallInterface,
} from "../../../contracts/util/Multicall";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061076d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100f657806386d516e8146100fc578063a8b0574e14610102578063ee82ac5e1461011057600080fd5b80630f28c97d1461008d578063252dba42146100a557806327e86d6e146100c65780634d2301cc146100ce575b600080fd5b425b60405161009c919061059c565b60405180910390f35b6100b86100b336600461045a565b610122565b60405161009c9291906105aa565b61008f6102a7565b61008f6100dc366004610436565b73ffffffffffffffffffffffffffffffffffffffff163190565b4461008f565b4561008f565b4160405161009c919061058e565b61008f61011e36600461048f565b4090565b8051439060609067ffffffffffffffff81111561014f57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561018257816020015b606081526020019060019003908161016d5790505b50905060005b83518110156102a1576000808583815181106101b457634e487b7160e01b600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106101f657634e487b7160e01b600052603260045260246000fd5b60200260200101516020015160405161020f9190610584565b6000604051808303816000865af19150503d806000811461024c576040519150601f19603f3d011682016040523d82523d6000602084013e610251565b606091505b50915091508161026057600080fd5b8084848151811061028157634e487b7160e01b600052603260045260246000fd5b602002602001018190525050508080610299906106d3565b915050610188565b50915091565b60006102b4600143610635565b40905090565b60006102cd6102c8846105e6565b6105ca565b905080838252602082019050828560208602850111156102ec57600080fd5b60005b8581101561033057813567ffffffffffffffff81111561030e57600080fd5b850161031a88826103cc565b84525060209283019291909101906001016102ef565b5050509392505050565b60006103486102c88461060a565b90508281526020810184848401111561036057600080fd5b61036b84828561066a565b509392505050565b803561037e8161071a565b92915050565b600082601f830112610394578081fd5b81356103a48482602086016102ba565b949350505050565b600082601f8301126103bc578081fd5b81356103a484826020860161033a565b6000604082840312156103dd578081fd5b6103e760406105ca565b905060006103f58484610373565b81830152602083013567ffffffffffffffff811115610412578182fd5b61041e858286016103ac565b6020840152505092915050565b803561037e81610731565b600060208284031215610447578081fd5b61045383828401610373565b9392505050565b60006020828403121561046b578081fd5b8082013567ffffffffffffffff811115610483578182fd5b6103a484828501610384565b6000602082840312156104a0578081fd5b6104538382840161042b565b60006104538383610530565b6104c18161064c565b82525050565b60006104d1825190565b808452602084019350836020820285016104eb8560200190565b845b8481101561051e578383038852815161050684826104ac565b935050602082016020989098019791506001016104ed565b50909695505050505050565b806104c1565b600061053a825190565b808452602084019350610551818560208601610676565b601f01601f19169290920192915050565b600061056c825190565b61057a818560208601610676565b9290920192915050565b61037e8183610562565b6020810161037e82846104b8565b6020810161037e828461052a565b604081016105b8828561052a565b81810360208301526103a481846104c7565b60006105d560405190565b90506105e182826106a6565b919050565b600067ffffffffffffffff82111561060057610600610704565b5060209081020190565b600067ffffffffffffffff82111561062457610624610704565b601f19601f83011660200192915050565b600082821015610647576106476106ee565b500390565b600073ffffffffffffffffffffffffffffffffffffffff821661037e565b82818337506000910152565b60005b83811015610691578181015183820152602001610679565b838111156106a0576000848401525b50505050565b601f19601f830116810181811067ffffffffffffffff821117156106cc576106cc610704565b6040525050565b60006000198214156106e7576106e76106ee565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6107238161064c565b811461072e57600080fd5b50565b8061072356fea2646970667358221220a158611c4acd442b328a05f610861d8ddddeedb29c6dcc5245ce5aa11762323a64736f6c63430008040033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  override connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
