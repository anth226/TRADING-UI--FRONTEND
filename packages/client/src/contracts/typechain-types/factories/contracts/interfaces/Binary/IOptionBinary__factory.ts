/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IOptionBinary,
  IOptionBinaryInterface,
} from "../../../../contracts/interfaces/Binary/IOptionBinary";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "betId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "win",
        type: "bool",
      },
    ],
    name: "Bet_close",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "betId",
        type: "uint256",
      },
    ],
    name: "Bet_new",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "investment",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionType",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "derivativeId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeClose",
        type: "uint256",
      },
    ],
    name: "bet_add",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "betId",
        type: "uint256",
      },
    ],
    name: "bet_close",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_commission",
        type: "uint256",
      },
    ],
    name: "setCommission",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_mcl",
        type: "uint256",
      },
    ],
    name: "setMcl",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "_profitFactor",
        type: "int128",
      },
    ],
    name: "setProfitFactor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "_volFactor",
        type: "int128",
      },
    ],
    name: "setVolatilityFactor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IOptionBinary__factory {
  static readonly abi = _abi;
  static createInterface(): IOptionBinaryInterface {
    return new utils.Interface(_abi) as IOptionBinaryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IOptionBinary {
    return new Contract(address, _abi, signerOrProvider) as IOptionBinary;
  }
}
