/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockOracle,
  MockOracleInterface,
} from "../../../contracts/mock/MockOracle";

const _abi = [
  {
    inputs: [],
    name: "callbackAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "data",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "fulfillOracleRequest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "func",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onTokenTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_payment",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_specId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_callbackAddress",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "_callbackFunctionId",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_dataVersion",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "oracleRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610be1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100865760003560e01c806367e404ce1161005b57806367e404ce146100ff57806373d4a13a14610112578063a4c0ed3614610127578063bfa814b51461013a57600080fd5b80626d6cae1461008b578062df475e146100aa57806340429946146100ca5780634a21b73c146100df575b600080fd5b61009460045481565b6040516100a1919061099c565b60405180910390f35b6001546100bd906001600160a01b031681565b6040516100a19190610918565b6100dd6100d83660046106d2565b610154565b005b6100f26100ed3660046107fd565b6101e0565b6040516100a1919061098e565b6000546100bd906001600160a01b031681565b61011a61031b565b6040516100a191906109b8565b6100dd61013536600461079b565b6103a9565b6003546101479060e01b81565b6040516100a191906109aa565b88846040516020016101679291906108ee565b60408051808303601f1901815291905280516020909101206004556003805463ffffffff191660e087901c179055600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0388161790556101d4600283836104f1565b50505050505050505050565b60018054604051600092839283926001600160a01b03909116916102169130916103e89186916064918291908490602401610926565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0b89fa480000000000000000000000000000000000000000000000000000000017905251610279919061090e565b6000604051808303816000865af19150503d80600081146102b6576040519150601f19603f3d011682016040523d82523d6000602084013e6102bb565b606091505b50805191935091506102d4906002906020840190610575565b506103146040518060400160405280600881526020017f7374617475733a2000000000000000000000000000000000000000000000000081525083610459565b5092915050565b6002805461032890610ace565b80601f016020809104026020016040519081016040528092919081815260200182805461035490610ace565b80156103a15780601f10610376576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161038457829003601f168201915b505050505081565b8260248201528160448201526000306001600160a01b0316826040516103cf919061090e565b600060405180830381855af49150503d806000811461040a576040519150601f19603f3d011682016040523d82523d6000602084013e61040f565b606091505b5050905080610453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044a906109f0565b60405180910390fd5b50505050565b6104cc828260405160240161046f9291906109d0565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc3b55635000000000000000000000000000000000000000000000000000000001790526104d0565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280546104fd90610ace565b90600052602060002090601f01602090048101928261051f5760008555610565565b82601f106105385782800160ff19823516178555610565565b82800160010185558215610565579182015b8281111561056557823582559160200191906001019061054a565b506105719291506105e9565b5090565b82805461058190610ace565b90600052602060002090601f0160209004810192826105a35760008555610565565b82601f106105bc57805160ff1916838001178555610565565b82800160010185558215610565579182015b828111156105655782518255916020019190600101906105ce565b5b8082111561057157600081556001016105ea565b600061061161060c84610a47565b610a2b565b90508281526020810184848401111561062957600080fd5b610634848285610a96565b509392505050565b803561064781610b66565b92915050565b803561064781610b7d565b803561064781610b83565b60008083601f840112610674578182fd5b50813567ffffffffffffffff81111561068b578182fd5b6020830191508360018202830111156106a357600080fd5b9250929050565b600082601f8301126106ba578081fd5b81356106ca8482602086016105fe565b949350505050565b60008060008060008060008060006101008a8c0312156106f0578485fd5b6106fc8b868c0161063c565b9850602061070c8c828d0161064d565b985050604061071d8c828d0161064d565b975050606061072e8c828d0161063c565b965050608061073f8c828d01610658565b95505060a06107508c828d0161064d565b94505060c06107618c828d0161064d565b93505060e08a013567ffffffffffffffff81111561077d578283fd5b6107898c828d01610663565b92509250509295985092959850929598565b6000806000606084860312156107af578283fd5b6107bb8584860161063c565b925060206107cb8682870161064d565b925050604084013567ffffffffffffffff8111156107e7578182fd5b6107f3868287016106aa565b9150509250925092565b60006020828403121561080e578081fd5b8082013567ffffffffffffffff811115610826578182fd5b6106ca848285016106aa565b61083b81610a6e565b82525050565b61083b61084d82610a6e565b610b28565b80151561083b565b8061083b565b7fffffffff00000000000000000000000000000000000000000000000000000000811661083b565b6000610892825190565b8084526020840193506108a9818560208601610aa2565b601f01601f19169290920192915050565b60006108c4825190565b6108d2818560208601610aa2565b9290920192915050565b61083b81610a7f565b61083b81610a8a565b6108f88184610841565b601401610905818361085a565b60200192915050565b61064781836108ba565b602081016106478284610832565b60e08101610934828a610832565b61094160208301896108e5565b61094e60408301886108dc565b61095b60608301876108dc565b61096860808301866108dc565b61097560a0830185610852565b61098260c0830184610852565b98975050505050505050565b602081016106478284610852565b60208101610647828461085a565b602081016106478284610860565b602080825281016109c98184610888565b9392505050565b604080825281016109e18185610888565b90506109c96020830184610852565b6020808252810161064781601881527f556e61626c6520746f2063726561746520726571756573740000000000000000602082015260400190565b6000610a3660405190565b9050610a428282610afb565b919050565b600067ffffffffffffffff821115610a6157610a61610b50565b601f19601f830116610905565b60006001600160a01b038216610647565b600060ff8216610647565b600061ffff8216610647565b82818337506000910152565b60005b83811015610abd578181015183820152602001610aa5565b838111156104535750506000910152565b600281046001821680610ae257607f821691505b60208210811415610af557610af5610b3a565b50919050565b601f19601f830116810181811067ffffffffffffffff82111715610b2157610b21610b50565b6040525050565b60006106478260006106478260601b90565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610b6f81610a6e565b8114610b7a57600080fd5b50565b80610b6f565b7fffffffff000000000000000000000000000000000000000000000000000000008116610b6f56fea26469706673582212200221f2af7fcab72cdd6543abcdac2d7e0f96b86f1debb6151bce0edf7817ec0064736f6c63430008040033";

type MockOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOracle__factory extends ContractFactory {
  constructor(...args: MockOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockOracle> {
    return super.deploy(overrides || {}) as Promise<MockOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockOracle {
    return super.attach(address) as MockOracle;
  }
  override connect(signer: Signer): MockOracle__factory {
    return super.connect(signer) as MockOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOracleInterface {
    return new utils.Interface(_abi) as MockOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOracle {
    return new Contract(address, _abi, signerOrProvider) as MockOracle;
  }
}
