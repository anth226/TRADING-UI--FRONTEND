/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockAbdk,
  MockAbdkInterface,
} from "../../../contracts/mock/MockAbdk";

const _abi = [
  {
    inputs: [
      {
        internalType: "int128",
        name: "x",
        type: "int128",
      },
    ],
    name: "CND",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    name: "fromTokenValue",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "val",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    name: "toTokenValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "";

type MockAbdkConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAbdkConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAbdk__factory extends ContractFactory {
  constructor(...args: MockAbdkConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockAbdk> {
    return super.deploy(overrides || {}) as Promise<MockAbdk>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockAbdk {
    return super.attach(address) as MockAbdk;
  }
  override connect(signer: Signer): MockAbdk__factory {
    return super.connect(signer) as MockAbdk__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAbdkInterface {
    return new utils.Interface(_abi) as MockAbdkInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAbdk {
    return new Contract(address, _abi, signerOrProvider) as MockAbdk;
  }
}
